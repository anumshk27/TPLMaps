global:
    default_order: function() { return feature.sort_key || 0; }

    currentTime: 'day'
    currentVersion: 'high'
    buildingStatus: false
    poiStatus: true
    sdk_api_key : tmp
    trafficStatus: false
    font_eng: SFProDisplay


    colorscheme:
        #roads
        motorway: function(){if(global.currentTime == 'day'){return '#F9E39D'; }else if(global.currentTime == 'vibrant'){return '#f56b3d'; }else if(global.currentTime == 'night'){return '#695e4d'; }else if(global.currentTime == 'dark'){return '#262626'; }else if(global.currentTime == 'walkabout'){return '#FFFFFF'; }}
        motorway_outline: function(){if(global.currentTime == 'day'){return '#F0B948'; }else if(global.currentTime == 'vibrant'){return '#ff4000'; }else if(global.currentTime == 'night'){return '#202934'; }else if(global.currentTime == 'dark'){return '#e4aa81'; }else if(global.currentTime == 'walkabout'){return '#B6ACAE'; }}
        highway: function(){if(global.currentTime == 'day'){return '#F9E39D'; }else if(global.currentTime == 'vibrant'){return '#ff9f80'; }else if(global.currentTime == 'night'){return '#695e4d'; }else if(global.currentTime == 'dark'){return '#262626'; }else if(global.currentTime == 'walkabout'){return '#FFFFFF'; }}
        highway_outline: function(){if(global.currentTime == 'day'){return '#F0B948'; }else if(global.currentTime == 'vibrant'){return '#f46d25'; }else if(global.currentTime == 'night'){return '#202934'; }else if(global.currentTime == 'dark'){return '#ddc588'; }else if(global.currentTime == 'walkabout'){return '#B6ACAE'; }}
        main_roads: function(){if(global.currentTime == 'day'){return '#F9E39D'; }else if(global.currentTime == 'vibrant'){return '#ffc6b3'; }else if(global.currentTime == 'night'){return '#7f725d'; }else if(global.currentTime == 'dark'){return '#262626'; }else if(global.currentTime == 'walkabout'){return '#FFFFFF'; }}
        main_roads_outline: function(){if(global.currentTime == 'day'){return '#F0B948'; }else if(global.currentTime == 'vibrant'){return '#ff9f80'; }else if(global.currentTime == 'night'){return '#232c39'; }else if(global.currentTime == 'dark'){return '#1785cf'; }else if(global.currentTime == 'walkabout'){return '#A89FA5'; }}
        secondary_roads: function(){if(global.currentTime == 'day'){return '#ffffff'; }else if(global.currentTime == 'vibrant'){return '#e9e5e1'; }else if(global.currentTime == 'night'){return '#38414e'; }else if(global.currentTime == 'dark'){return '#262626'; }else if(global.currentTime == 'walkabout'){return '#FFFFFF'; }}
        secondary_roads_outline: function(){if(global.currentTime == 'day'){return '#cfd2d7'; }else if(global.currentTime == 'vibrant'){return '#dbc6bd'; }else if(global.currentTime == 'night'){return '#232c39'; }else if(global.currentTime == 'dark'){return '#262626'; }else if(global.currentTime == 'walkabout'){return '#C0C6CB'; }}
        tertiary_roads: function(){if(global.currentTime == 'day'){return '#ffffff'; }else if(global.currentTime == 'vibrant'){return '#e9e5e1'; }else if(global.currentTime == 'night'){return '#38414e'; }else if(global.currentTime == 'dark'){return '#262626'; }else if(global.currentTime == 'walkabout'){return '#FFFFFF'; }}
        tertiary_roads_outline: function(){if(global.currentTime == 'day'){return '#cfd2d7'; }else if(global.currentTime == 'vibrant'){return '#dbc6bd'; }else if(global.currentTime == 'night'){return '#232c39'; }else if(global.currentTime == 'dark'){return '#262626'; }else if(global.currentTime == 'walkabout'){return '#C0C6CB'; }}
        streets: function(){if(global.currentTime == 'day'){return '#ffffff'; }else if(global.currentTime == 'vibrant'){return '#edeae6'; }else if(global.currentTime == 'night'){return '#38414e'; }else if(global.currentTime == 'dark'){return '#282d35'; }else if(global.currentTime == 'walkabout'){return '#FFFFFF'; }}
        streetview: function(){if(global.currentTime == 'day'){return '#009e83'; }else if(global.currentTime == 'vibrant'){return '#009e83'; }else if(global.currentTime == 'night'){return '#e25936'; }else if(global.currentTime == 'dark'){return '#e25936'; }else if(global.currentTime == 'walkabout'){return '#009e83'; }}
        selected_route: function(){if(global.currentTime == 'day'){return '#7ab899'; }else if(global.currentTime == 'vibrant'){return '#7ab899'; }else if(global.currentTime == 'night'){return '#7ab899'; }else if(global.currentTime == 'dark'){return '#7ab899'; }else if(global.currentTime == 'walkabout'){return '#7ab899'; }}
        selected_route_outline: function(){if(global.currentTime == 'day'){return '#782bca'; }else if(global.currentTime == 'vibrant'){return '#782bca'; }else if(global.currentTime == 'night'){return '#782bca'; }else if(global.currentTime == 'dark'){return '#782bca'; }else if(global.currentTime == 'walkabout'){return '#782bca'; }}
        segment: function(){if(global.currentTime == 'day'){return '#136734'; }else if(global.currentTime == 'vibrant'){return '#136734'; }else if(global.currentTime == 'night'){return '#136734'; }else if(global.currentTime == 'dark'){return '#136734'; }else if(global.currentTime == 'walkabout'){return '#136734'; }}
        segment_outline: function(){if(global.currentTime == 'day'){return '#67cc33'; }else if(global.currentTime == 'vibrant'){return '#67cc33'; }else if(global.currentTime == 'night'){return '#59a65d'; }else if(global.currentTime == 'dark'){return '#59a65d'; }else if(global.currentTime == 'walkabout'){return '#67cc33'; }}
        nonselected_route: function(){if(global.currentTime == 'day'){return '#d1c7c7'; }else if(global.currentTime == 'vibrant'){return '#d1c7c7'; }else if(global.currentTime == 'night'){return '#A9A9A9'; }else if(global.currentTime == 'dark'){return '#A9A9A9'; }else if(global.currentTime == 'walkabout'){return '#d1c7c7'; }}
        nonselected_route_outline: function(){if(global.currentTime == 'day'){return '#8c8c8c'; }else if(global.currentTime == 'vibrant'){return '#8c8c8c'; }else if(global.currentTime == 'night'){return '#8c8c8c'; }else if(global.currentTime == 'dark'){return '#8c8c8c'; }else if(global.currentTime == 'walkabout'){return '#8c8c8c'; }}
    
        #landuse
        religious: function(){if(global.currentTime == 'day'){return '#e6eaeb'; }else if(global.currentTime == 'vibrant'){return '#b2a899'; }else if(global.currentTime == 'night'){return '#242f3e'; }else if(global.currentTime == 'dark'){return '#a6b398'; }else if(global.currentTime == 'walkabout'){return '#EDF0F0'; }}
        sport: function(){if(global.currentTime == 'day'){return '#EEDFC8'; }else if(global.currentTime == 'vibrant'){return '#e0d1b8'; }else if(global.currentTime == 'night'){return '#242f3e'; }else if(global.currentTime == 'dark'){return '#808080'; }else if(global.currentTime == 'walkabout'){return '#c8c6be'; }}
        coveredarea: function(){if(global.currentTime == 'day'){return '#e6eaeb'; }else if(global.currentTime == 'vibrant'){return '#c6b9c6'; }else if(global.currentTime == 'night'){return '#242f3e'; }else if(global.currentTime == 'dark'){return '#8B8B8B'; }else if(global.currentTime == 'walkabout'){return '#cccfd4'; }}
        water: function(){if(global.currentTime == 'day'){return '#8AC3EF'; }else if(global.currentTime == 'vibrant'){return '#81e3e4'; }else if(global.currentTime == 'night'){return '#17263c'; }else if(global.currentTime == 'dark'){return '#001f33'; }else if(global.currentTime == 'walkabout'){return '#9BECF6'; }}
        park: function(){if(global.currentTime == 'day'){return '#B3DEBF'; }else if(global.currentTime == 'vibrant'){return '#d3e996'; }else if(global.currentTime == 'night'){return '#263c3f'; }else if(global.currentTime == 'dark'){return '#197D77'; }else if(global.currentTime == 'walkabout'){return '#D9EDE2'; }}
        vegetation: function(){if(global.currentTime == 'day'){return '#B3DEBF'; }else if(global.currentTime == 'vibrant'){return '#bbd279'; }else if(global.currentTime == 'night'){return '#263c3f'; }else if(global.currentTime == 'dark'){return '#1A6E69'; }else if(global.currentTime == 'walkabout'){return '#D0E2CC'; }}
        commercial: function(){if(global.currentTime == 'day'){return '#fff6dc'; }else if(global.currentTime == 'vibrant'){return '#d1c7c7'; }else if(global.currentTime == 'night'){return '#242f3e'; }else if(global.currentTime == 'dark'){return '#2C4240'; }else if(global.currentTime == 'walkabout'){return '#EDEFEF'; }}
        hospital: function(){if(global.currentTime == 'day'){return '#fad8d4'; }else if(global.currentTime == 'vibrant'){return '#eac8c8'; }else if(global.currentTime == 'night'){return '#9d6561'; }else if(global.currentTime == 'dark'){return '#c98983'; }else if(global.currentTime == 'walkabout'){return '#FCEFF3'; }}
        school: function(){if(global.currentTime == 'day'){return '#e6eaeb'; }else if(global.currentTime == 'vibrant'){return '#f2da8c'; }else if(global.currentTime == 'night'){return '#242f3e'; }else if(global.currentTime == 'dark'){return '#a89d8a'; }else if(global.currentTime == 'walkabout'){return '#ced9d7'; }}
        industrial: function(){if(global.currentTime == 'day'){return '#f8f9fa'; }else if(global.currentTime == 'vibrant'){return '#c7cdd1'; }else if(global.currentTime == 'night'){return '#242f3e'; }else if(global.currentTime == 'dark'){return '#858593'; }else if(global.currentTime == 'walkabout'){return '#DDE2E5'; }}
        misc: function(){if(global.currentTime == 'day'){return '#faf8f2'; }else if(global.currentTime == 'vibrant'){return '#faf8f2'; }else if(global.currentTime == 'night'){return '#242f3e'; }else if(global.currentTime == 'dark'){return '#746f3e'; }else if(global.currentTime == 'walkabout'){return '#FFF3E6'; }}
        openarea: function(){if(global.currentTime == 'day'){return '#f8f9fa'; }else if(global.currentTime == 'vibrant'){return '#fde2c6'; }else if(global.currentTime == 'night'){return '#2f3948'; }else if(global.currentTime == 'dark'){return '#666666'; }else if(global.currentTime == 'walkabout'){return '#cccccc'; }}

        #others
        citiesfill8_day: '#f8f9fa'
        citiesfill15_day: '#f8f9fa'
        citiesfill8_vibrant: '#fff1e8'
        citiesfill15_vibrant: '#fffaf5'
        citiesfill8_dark: '#0A3B5C'
        citiesfill15_dark: '#19394D'

        world: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'vibrant'){return '#f7f3f1'; }else if(global.currentTime == 'night'){return '#242f3e'; }else if(global.currentTime == 'dark'){return '#4A95D9'; }else if(global.currentTime == 'walkabout'){return '#F1F1F1'; }}
        continent_a: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'vibrant'){return '#d8e3b5'; }else if(global.currentTime == 'night'){return '#242f3e'; }else if(global.currentTime == 'dark'){return '#4696DD'; }else if(global.currentTime == 'walkabout'){return '#F1F1F1'; }}
        continent_p: function(){if(global.currentTime == 'day'){return '#fbf8f3'; }else if(global.currentTime == 'vibrant'){return '#fffbf5'; }else if(global.currentTime == 'night'){return '#242f3e'; }else if(global.currentTime == 'dark'){return '#0d4a73'; }else if(global.currentTime == 'walkabout'){return '#F1F1F1'; }}
        continent_b: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'vibrant'){return '#FFF3EF'; }else if(global.currentTime == 'night'){return '#242f3e'; }else if(global.currentTime == 'dark'){return '#204F85'; }else if(global.currentTime == 'walkabout'){return '#F1F1F1'; }}
        continent_c: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'vibrant'){return '#f5f5bc'; }else if(global.currentTime == 'night'){return '#242f3e'; }else if(global.currentTime == 'dark'){return '#4085BE'; }else if(global.currentTime == 'walkabout'){return '#F1F1F1'; }}
        continent_i: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'vibrant'){return '#ffe0cc'; }else if(global.currentTime == 'night'){return '#242f3e'; }else if(global.currentTime == 'dark'){return '#2A97FC'; }else if(global.currentTime == 'walkabout'){return '#F1F1F1'; }}
        continent_t: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'vibrant'){return '#f7efe5'; }else if(global.currentTime == 'night'){return '#242f3e'; }else if(global.currentTime == 'dark'){return '#225189'; }else if(global.currentTime == 'walkabout'){return '#F1F1F1'; }}
        continent_r: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'vibrant'){return '#e5f7ef'; }else if(global.currentTime == 'night'){return '#242f3e'; }else if(global.currentTime == 'dark'){return '#518FDA'; }else if(global.currentTime == 'walkabout'){return '#F1F1F1'; }}
        continent_u: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'vibrant'){return '#f7e5ee'; }else if(global.currentTime == 'night'){return '#242f3e'; }else if(global.currentTime == 'dark'){return '#3280C8'; }else if(global.currentTime == 'walkabout'){return '#F1F1F1'; }}
        continent_s: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'vibrant'){return '#f6f9eb'; }else if(global.currentTime == 'night'){return '#242f3e'; }else if(global.currentTime == 'dark'){return '#2C5A95'; }else if(global.currentTime == 'walkabout'){return '#F1F1F1'; }}

        borders_3: function(){if(global.currentTime == 'day'){return '#a09c9a'; }else if(global.currentTime == 'vibrant'){return '#a09c9a'; }else if(global.currentTime == 'night'){return '#2b384b'; }else if(global.currentTime == 'dark'){return '#16476a'; }else if(global.currentTime == 'walkabout'){return '#FFFFFF'; }}
        borders_2: function(){if(global.currentTime == 'day'){return '#E6F3D8'; }else if(global.currentTime == 'vibrant'){return '#E6F3D8'; }else if(global.currentTime == 'night'){return '#16476a'; }else if(global.currentTime == 'dark'){return '#1e6394'; }else if(global.currentTime == 'walkabout'){return '#FFFFFF'; }}
        borders_1: function(){if(global.currentTime == 'day'){return '#FFECE5'; }else if(global.currentTime == 'vibrant'){return '#FFECE5'; }else if(global.currentTime == 'night'){return '#2b384b'; }else if(global.currentTime == 'dark'){return '#0c2a41'; }else if(global.currentTime == 'walkabout'){return '#F1F1F1'; }}
        province: function(){if(global.currentTime == 'day'){return '#808080'; }else if(global.currentTime == 'vibrant'){return '#808080'; }else if(global.currentTime == 'night'){return '#16476a'; }else if(global.currentTime == 'dark'){return '#93c5eb'; }else if(global.currentTime == 'walkabout'){return '#FFFFFF'; }}
        
        #labels
        capitals: function(){if(global.currentTime == 'day'){return '#000000'; }else if(global.currentTime == 'vibrant'){return '#000000'; }else if(global.currentTime == 'night'){return '#c88e60'; }else if(global.currentTime == 'dark'){return '#FFFFFF'; }else if(global.currentTime == 'walkabout'){return '#000000'; }}
        capitals_stroke: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'vibrant'){return '#ffffff'; }else if(global.currentTime == 'night'){return '#3a332f'; }else if(global.currentTime == 'dark'){return '#0c2a41'; }else if(global.currentTime == 'walkabout'){return '#DEE1E3'; }}
        country: function(){if(global.currentTime == 'day'){return '#242424'; }else if(global.currentTime == 'vibrant'){return '#000'; }else if(global.currentTime == 'night'){return '#726654'; }else if(global.currentTime == 'dark'){return '#ffffff'; }else if(global.currentTime == 'walkabout'){return '#3B3C3D'; }}
        country_stroke: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'vibrant'){return '#FFFFFF'; }else if(global.currentTime == 'night'){return '#0c2a41'; }else if(global.currentTime == 'dark'){return '#0c2a41'; }else if(global.currentTime == 'walkabout'){return '#BDC0C1'; }}
        provinces_fill: function(){if(global.currentTime == 'day'){return '#4e5256'; }else if(global.currentTime == 'vibrant'){return '#7f6e60'; }else if(global.currentTime == 'night'){return '#726654'; }else if(global.currentTime == 'dark'){return '#ffffff'; }else if(global.currentTime == 'walkabout'){return '#B8B8B8'; }}
        provinces_stroke: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'vibrant'){return '#f6d7bc'; }else if(global.currentTime == 'night'){return '#0c2a41'; }else if(global.currentTime == 'dark'){return '#0c2a41'; }else if(global.currentTime == 'walkabout'){return '#BDC0C1'; }}
        province_cap_fill: function(){if(global.currentTime == 'day'){return '#000'; }else if(global.currentTime == 'vibrant'){return '#49311c'; }else if(global.currentTime == 'night'){return '#d39463'; }else if(global.currentTime == 'dark'){return '#d4c4ca'; }else if(global.currentTime == 'walkabout'){return '#000000'; }}
        province_cap_stroke: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'vibrant'){return '#FFFFFF'; }else if(global.currentTime == 'night'){return '#000'; }else if(global.currentTime == 'dark'){return '#604020'; }else if(global.currentTime == 'walkabout'){return '#DEE1E3'; }}

        cities_fill: function(){if(global.currentTime == 'day'){return '#3A414A'; }else if(global.currentTime == 'vibrant'){return '#49311c'; }else if(global.currentTime == 'night'){return '#c88e60'; }else if(global.currentTime == 'dark'){return '#e9f3fb'; }else if(global.currentTime == 'walkabout'){return '#404040'; }}
        cities_stroke: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'night'){return '#000000'; }}
        area_sector_fill: function(){if(global.currentTime == 'day'){return '#3A414A'; }else if(global.currentTime == 'vibrant'){return '#49311c'; }else if(global.currentTime == 'night'){return '#726654'; }else if(global.currentTime == 'dark'){return '#e9f3fb'; }else if(global.currentTime == 'walkabout'){return '#2D2D2E'; }}
        area_sector_stroke: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'vibrant'){return '#FFFFFF'; }else if(global.currentTime == 'night'){return '#0c2a41'; }else if(global.currentTime == 'dark'){return '#0c2a41'; }else if(global.currentTime == 'walkabout'){return '#DEE1E3'; }}
        area_subsector_fill: function(){if(global.currentTime == 'day'){return '#60656C'; }else if(global.currentTime == 'vibrant'){return '#49311c'; }else if(global.currentTime == 'night'){return '#726654'; }else if(global.currentTime == 'dark'){return '#e9f3fb'; }else if(global.currentTime == 'walkabout'){return '#2D2D2E'; }}
        area_subsector_stroke: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'vibrant'){return '#FFFFFF'; }else if(global.currentTime == 'night'){return '#0c2a41'; }else if(global.currentTime == 'dark'){return '#0c2a41'; }else if(global.currentTime == 'walkabout'){return '#DEE1E3'; }}

        road_text: function(){if(global.currentTime == 'day'){return '#4e5256'; }else if(global.currentTime == 'vibrant'){return '#595959'; }else if(global.currentTime == 'night'){return '#9ca5b3'; }else if(global.currentTime == 'dark'){return '#95b7b7'; }else if(global.currentTime == 'walkabout'){return '#7C7C7C'; }}
        road_text_stroke: function(){if(global.currentTime == 'day'){return '#d5d6d6'; }else if(global.currentTime == 'vibrant'){return '#EEEEEE'; }else if(global.currentTime == 'night'){return '#4e5868'; }else if(global.currentTime == 'dark'){return '#532e19'; }else if(global.currentTime == 'walkabout'){return '#EBECED'; }}
        highway_text: function(){if(global.currentTime == 'day'){return '#844C18'; }else if(global.currentTime == 'vibrant'){return '#8f473d'; }else if(global.currentTime == 'night'){return '#f3d19c'; }else if(global.currentTime == 'dark'){return '#e4eaef'; }else if(global.currentTime == 'walkabout'){return '#6f6f6f'; }}
        highway_text_border: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'vibrant'){return '#ffd9cc'; }else if(global.currentTime == 'night'){return '#333b45'; }else if(global.currentTime == 'dark'){return '#532e19'; }else if(global.currentTime == 'walkabout'){return '#EBECED'; }}
        main_text: function(){if(global.currentTime == 'day'){return '#7a3e06'; }else if(global.currentTime == 'vibrant'){return '#8f473d'; }else if(global.currentTime == 'night'){return '#f3d19c'; }else if(global.currentTime == 'dark'){return '#e4eaef'; }else if(global.currentTime == 'walkabout'){return '#6f6f6f'; }}
        main_border: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'vibrant'){return '#ffd9cc'; }else if(global.currentTime == 'night'){return '#333b45'; }else if(global.currentTime == 'dark'){return '#532e19'; }else if(global.currentTime == 'walkabout'){return '#EBECED'; }}
        secondary_text_13: function(){if(global.currentTime == 'day'){return '#808080'; }else if(global.currentTime == 'vibrant'){return '#595959'; }else if(global.currentTime == 'night'){return '#9ca5b3'; }else if(global.currentTime == 'dark'){return '#95b7b7'; }else if(global.currentTime == 'walkabout'){return '#7C7C7C'; }}
        secondary_text_15: function(){if(global.currentTime == 'day'){return '#4E5256'; }else if(global.currentTime == 'vibrant'){return '#595959'; }else if(global.currentTime == 'night'){return '#9ca5b3'; }else if(global.currentTime == 'dark'){return '#95b7b7'; }else if(global.currentTime == 'walkabout'){return '#7C7C7C'; }}
        secondary_stroke: function(){if(global.currentTime == 'day'){return '#d5d6d6'; }else if(global.currentTime == 'vibrant'){return '#EEEEEE'; }else if(global.currentTime == 'night'){return '#4e5868'; }else if(global.currentTime == 'dark'){return '#532e19'; }else if(global.currentTime == 'walkabout'){return '#EBECED'; }}

        poi_fill: function(){if(global.currentTime == 'day'){return '#636363'; }else if(global.currentTime == 'night'){return '#87d1f5'; }}
        poi_stroke: function(){if(global.currentTime == 'day'){return '#E8E8E8'; }else if(global.currentTime == 'vibrant'){return '#FFFFFF'; }else if(global.currentTime == 'night'){return '#17263d'; }else if(global.currentTime == 'dark'){return '#532e19'; }else if(global.currentTime == 'walkabout'){return '#DEE1E3'; }}
        search_poi_stroke: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'night'){return '#282d35'; }}

        water_fill: function(){if(global.currentTime == 'day'){return '#345C7A'; }else if(global.currentTime == 'night'){return '#525c6c'; }}
        water_stroke: function(){if(global.currentTime == 'day'){return '#5488d8'; }else if(global.currentTime == 'night'){return '#2a3546'; }}

        parks_fill: function(){if(global.currentTime == 'day'){return '#188038'; }else if(global.currentTime == 'night'){return '#659071'; }}
        parks_stroke: function(){if(global.currentTime == 'day'){return '#e6f4ea'; }else if(global.currentTime == 'night'){return '#324449'; }}
#        endflag: function(){if(global.currentTime == 'day'){return '#404040'; }else if(global.currentTime == 'night'){return '#FFFFFF'; }}

    pois_color:
        dark_mode: '#87d1f5'

        accounting: '#8C8C8C'
        advertisingagency: '#8C8C8C'
        agribusiness: '#8C8C8C'
        airport: '#2E5387'
        ambulance: '#A52635'
        amusementpark: '#6F3188'
        aquarium: '#6F3188'
        artgallery: '#6F3188'
        atm: '#026639'
        auditorium: '#6F3188'
        autospareparts: '#985C03'
        bank: '#026639'
        barber: '#0D41A8'
        basketballcourt: '#6F3188'
        beautysalon: '#0D41A8'
        bookstore: '#0D41A8'
        booksandstationers: '#0D41A8'

        busstation: '#2E5387'
        busstop: '#2E5387'
        cafe: '#D36913'
        campground: '#6F3188'
        canteen: '#D36913'
        carrepair: '#985C03'
        carshowroom: '#985C03'
        carwash: '#985C03'
        catererseventplanners: '#8C8C8C'
        cemetery: '#8C8C8C'
        church: '#026639'
        cinema: '#6F3188'
        cleaningandlaundry: '#8C8C8C'
        clothingstore: '#0D41A8'
        college: '#026639'
        communitycenter: '#8C8C8C'

        computerstore: '#0D41A8'
        constructionservices: '#8C8C8C'
        conveniencestore: '#0D41A8'
        cosmeticsstore: '#0D41A8'
        courierservice: '#8C8C8C'
        court: '#026639'
        cricketground: '#6F3188'
        currencyexchange: '#026639'
        dairyshop: '#0D41A8'
        dentist: '#A52635'
        dhaba: '#D36913'
        drivingschool: '#8C8C8C'
        dryport: '#2E5387'
        electricalstore: '#0D41A8'
        electrician: '#8C8C8C'
        electricityoffice: '#8C8C8C'
        electronicsstore: '#0D41A8'

        embassy: '#026639'
        equipment: '#8C8C8C'
        exhibitionhall: '#6F3188'
        factory: '#8C8C8C'
        fastfood: '#D36913'
        filterationplant: '#8C8C8C'
        firestation: '#026639'
        fitnesscenter: '#6F3188'
        florist: '#0D41A8'
        flyingclub: '#6F3188'
        footballground: '#6F3188'
        fruitandvegetable: '#0D41A8'
        fuelstation: '#985C03'
        functionhall: '#6F3188'
        furniturestore: '#0D41A8'
        giftstore: '#0D41A8'
        glasswork: '#8C8C8C'

        governmentbuilding: '#026639'
        guesthouse: '#6F3188'
        gurdwara: '#026639'
        hardwareandsanitary: '#8C8C8Cf'
        herbalclinic: '#A52635'
        hijamacenter: '#A52635'
        hikmat: '#A52635'
        historicalplace: '#6F3188'
        hockeyground: '#6F3188'
        homegoodsstore: '#0D41A8'
        homeopathicclinic: '#A52635'
        hospital: '#A52635'
        hostel: '#6F3188'
        hotel: '#6F3188'
        icecreamparlor: '#D36913'
        imambargah: '#026639'
        indoorgames: '#6F3188'

        insuranceagency: '#8C8C8C'
        intersection: '#6F3188'
        jazz: '#8C8C8C'
        jewellerystore: '#0D41A8'
        juicebar: '#D36913'
        khokha: '#0D41A8'
        laboratory: '#A52635'
        langar: '#8C8C8C'
        lawenforcement: '#A52635'
        lawyer: '#8C8C8C'
        library: '#026639'
        localadministration: '#8C8C8C'
        lpgsupplier: '#8C8C8C'
        madrassa: '#026639'
        materialsupplier: '#8C8C8C'
        meatstore: '#0D41A8'
        medicalclinic: '#A52635'

        metalwork: '#8C8C8C'
        mill: '#8C8C8C'
        mobileshop: '#0D41A8'
        moneytransfer: '#026639'
        monument: '#6F3188'
        mosque: '#026639'
        motel: '#6F3188'
        motorbikerepair: '#985C03'
        motorbikeshowroom: '#985C03'
        museum: '#6F3188'
        newspaper: '#8C8C8C'
        ngo: '#8C8C8C'
        oiltraders: '#8C8C8C'
        optician: '#0D41A8'
        orphanage: '#8C8C8C'
        otherbeautyandspa: '#0D41A8'
        othercivicutilities: '#8C8C8C'

        otherconstruction: '#8C8C8C'
        othereducation: '#026639'
        otherevents: '#6F3188'
        otherfinance: '#026639'
        otherfood: '#D36913'
        othergeneral: '#8C8C8C'
        othergovernment: '#026639'
        othergrocery: '#0D41A8'
        otherindustry: '#8C8C8C'
        otherlocalbusinesses: '#8C8C8C'
        otherlodging: '#6F3188'
        othermedia: '#8C8C8C'
        othermedical: '#A52635'
        otherrecreation: '#6F3188'
        otherreligion: '#026639'
        othershopping: '#0D41A8'
        othersocialservice: '#8C8C8C'

        othersports: '#6F3188'
        othertourist: '#6F3188'
        # othertransportation: '#2E5387'
        othervehicle: '#985C03'
        park: '#6F3188'
        parking: '#985C03'
        petstore: '#A52635'
        pharmacy: '#A52635'
        photostudio: '#8C8C8C'
        plumber: '#8C8C8C'
        postoffice: '#8C8C8C'
        powerstation: '#8C8C8C'
        pressclub: '#8C8C8C'
        printing: '#8C8C8C'
        privatecompany: '#8C8C8C'
        radiostation: '#8C8C8C'
        railwaystation: '#2E5387'

        realestateagency: '#8C8C8C'
        recyclestore: '#8C8C8C'
        refinery: '#8C8C8C'
        rentacar: '#985C03'
        rescueservice: '#8C8C8C'
        restaurant: '#D36913'
        school: '#026639'
        seaport: '#2E5387'
        shoestore: '#0D41A8'
        shoppingmall: '#0D41A8'
        shrine: '#026639'
        spa: '#0D41A8'
        sportsgoods: '#0D41A8'
        squashcourt: '#6F3188'
        stadium: '#6F3188'
        stockbroker: '#026639'
        suigasoffice: '#8C8C8C'

        supermarket: '#0D41A8'
        sweetsandbakers: '#D36913'
        swimmingpool: '#6F3188'
        tailor: '#8C8C8C'
        tandoor: '#D36913'
        taxistand: '#2E5387'
        technicalservices: '#8C8C8C'
        telecommunication: '#8C8C8C'
        telenor: '#8C8C8C'
        temple: '#026639'
        tenniscourt: '#6F3188'
        tomb: '#6F3188'
        toystore: '#0D41A8'
        tplcorp: '#8C8C8C'
        tplinsurance: '#8C8C8C'
        tpllifeinsurance: '#8C8C8C'
        tplmaps: '#8C8C8C'
        tplproperties: '#8C8C8C'
        tpltrakker: '#8C8C8C'
        traininginstitute: '#026639'
        travelagency: '#8C8C8C'
        tuitioncenter: '#026639'

        tvchannel: '#8C8C8C'
        tvstudio: '#8C8C8C'
        tyreshop: '#985C03'
        university: '#026639'
        veterinarycare: '#A52635'
        vocationalcenter: '#026639'
        volleyballcourt: '#6F3188'
        warehouse: '#8C8C8C'
        wholesale: '#0D41A8'
        woodwork: '#8C8C8C'
        zoo: '#6F3188'

cameras:
    perspective:
        position: [69.9551, 30.3753, 4.50]
        type: perspective
        focal_length: [[10,6.5],[13,5.5], [14, 4.5],[15,4.],[16, 2.5], [17, 2.2], [18, 2.], [19, 1.25]] # pairs of [zoom, focal len]
        vanishing_point: [0, 0] # relative to center of screen, in pixels
        active: true

lights:
    directional1:
        type: directional
        origin: world
        direction: [1.7, 1.9, -3.]
        ambient: [0.585,0.585,0.59]
        diffuse: 0.55

scene:
    background:
        color: '#fbf8f3'

cinnabar-colors:
    cameras:
        - &camera_settings            { type: isometric, axis: [0, .1], vanishing_point: [0, -500] }

# Define the textures that will be used in the redering
# For the POIs icons we will give the textures for each type of the POI
# The name, followed by the URL, and then define the sprite (for now the whole png is being used as a sprite
# so we are using 0 as both x and y origin, and the icon itself in 18x18 pixels)
# a different texture object for each icon as the icons are kept in a seperate png file

textures:
    pois:
        url: TPLBaseMapResources.bundle/map_cat_icons/POI_Icons_Unselected.png
        sprites:
            accounting: [80, 300, 80, 100]
            advertisingagency: [0, 400, 80, 100]
            agribusiness: [80, 300, 80, 100]
            airport: [240, 100, 80, 100]
            ambulance: [0, 100, 80, 100]
            amusementpark: [240, 200, 80, 100]
            aquarium: [240, 200, 80, 100]
            artgallery: [160, 200, 80, 100]
            atm: [320, 0, 80, 100]
            auditorium: [160, 200, 80, 100]
            autospareparts: [80, 400, 80, 100]
            bank: [320, 0, 80, 100]
            barber: [560, 400, 80, 100]
            basketballcourt: [0, 200, 80, 100]
            beautysalon: [560, 400, 80, 100]
            bookstore: [480, 400, 80, 100]
            booksandstationers: [480, 400, 80, 100]
            busstation: [400, 100, 80, 100]
            busstop: [400, 100, 80, 100]
            cafe: [560, 0, 80, 100]
            campground: [240, 200, 80, 100]
            canteen: [560, 0, 80, 100]
            carrepair: [80, 400, 80, 100]
            carshowroom: [80, 400, 80, 100]
            carwash: [80, 400, 80, 100]
            catererseventplanners: [80, 300, 80, 100]
            cemetery: [160, 300, 80, 100]
            church: [160, 0, 80, 100]
            cinema: [400, 200, 80, 100]
            cleaningandlaundry: [80, 300, 80, 100]
            clothingstore: [480, 400, 80, 100]
            college: [0, 0, 80, 100]
            communitycenter: [0, 300, 80, 100]
            computerstore: [480, 400, 80, 100]
            constructionservices: [560, 300, 80, 100]
            conveniencestore: [400, 400, 80, 100]
            cosmeticsstore: [480, 400, 80, 100]
            courierservice: [240, 300, 80, 100]
            court: [400, 0, 80, 100]
            cricketground: [0, 200, 80, 100]
            currencyexchange: [320, 0, 80, 100]
            dairyshop: [400, 400, 80, 100]
            dentist: [0, 100, 80, 100]
            dhaba: [560, 0, 80, 100]
            drivingschool: [80, 300, 80, 100]
            dryport: [480, 100, 80, 100]
            electricalstore: [480, 400, 80, 100]
            electrician: [560, 300, 80, 100]
            electricityoffice: [320, 300, 80, 100]
            electronicsstore: [480, 400, 80, 100]
            embassy: [400, 0, 80, 100]
            equipment: [560, 300, 80, 100]
            exhibitionhall: [80, 200, 80, 100]
            factory: [0, 400, 80, 100]
            fastfood: [560, 0, 80, 100]
            filterationplant: [400, 300, 80, 100]
            firestation: [400, 0, 80, 100]
            fitnesscenter: [0, 200, 80, 100]
            florist: [480, 400, 80, 100]
            flyingclub: [240, 200, 80, 100]
            footballground: [0, 200, 80, 100]
            fruitandvegetable: [400, 400, 80, 100]
            fuelstation: [320, 400, 80, 100]
            functionhall: [80, 200, 80, 100]
            furniturestore: [480, 400, 80, 100]
            giftstore: [480, 400, 80, 100]
            glasswork: [560, 300, 80, 100]
            governmentbuilding: [400, 0, 80, 100]
            guesthouse: [480, 200, 80, 100]
            gurdwara: [160, 0, 80, 100]
            hardwareandsanitary: [560, 300, 80, 100]
            herbalclinic: [0, 100, 80, 100]
            hijamacenter: [0, 100, 80, 100]
            hikmat: [0, 100, 80, 100]
            historicalplace: [560, 200, 80, 100]
            hockeyground: [0, 200, 80, 100]
            homegoodsstore: [480, 400, 80, 100]
            homeopathicclinic: [0, 100, 80, 100]
            hospital: [0, 100, 80, 100]
            hostel: [480, 200, 80, 100]
            hotel: [480, 200, 80, 100]
            icecreamparlor: [560, 0, 80, 100]
            imambargah: [160, 0, 80, 100]
            indoorgames: [160, 200, 80, 100]
            insuranceagency: [80, 300, 80, 100]
            intersection: [240, 200, 80, 100]
            jazz: [0, 400, 80, 100]
            jewellerystore: [480, 400, 80, 100]
            juicebar: [560, 0, 80, 100]
            khokha: [480, 400, 80, 100]
            laboratory: [0, 100, 80, 100]
            langar: [0, 300, 80, 100]
            lawenforcement: [160, 100, 80, 100]
            lawyer: [80, 300, 80, 100]
            library: [80, 0, 80, 100]
            localadministration: [400, 0, 80, 100]
            lpgsupplier: [80, 300, 80, 100]
            madrassa: [0, 0, 80, 100]
            materialsupplier: [560, 300, 80, 100]
            meatstore: [400, 400, 80, 100]
            medicalclinic: [0, 100, 80, 100]
            metalwork: [560, 300, 80, 100]
            mill: [0, 400, 80, 100]
            mobileshop: [480, 400, 80, 100]
            moneytransfer: [320, 0, 80, 100]
            monument: [560, 200, 80, 100]
            mosque: [240, 0, 80, 100]
            motel: [480, 200, 80, 100]
            motorbikerepair: [160, 400, 80, 100]
            motorbikeshowroom: [160, 400, 80, 100]
            museum: [560, 200, 80, 100]
            newspaper: [0, 400, 80, 100]
            ngo: [0, 300, 80, 100]
            oiltraders: [80, 300, 80, 100]
            optician: [480, 400, 80, 100]
            orphanage: [0, 300, 80, 100]
            otherbeautyandspa: [560, 400, 80, 100]
            othercivicutilities: [0, 400, 80, 100]
            otherconstruction: [560, 300, 80, 100]
            othereducation: [0, 0, 80, 100]
            otherevents: [80, 200, 80, 100]
            otherfinance: [320, 0, 80, 100]
            otherfood: [560, 0, 80, 100]
            othergeneral: [0, 400, 80, 100]
            othergovernment: [400, 0, 80, 100]
            othergrocery: [400, 400, 80, 100]
            otherindustry: [0, 400, 80, 100]
            otherlocalbusinesses: [80, 300, 80, 100]
            otherlodging: [480, 200, 80, 100]
            othermedia: [0, 400, 80, 100]
            othermedical: [0, 100, 80, 100]
            otherrecreation: [240, 200, 80, 100]
            otherreligion: [160, 0, 80, 100]
            othershopping: [480, 400, 80, 100]
            othersocialservice: [0, 300, 80, 100]
            othersports: [0, 200, 80, 100]
            othertourist: [560, 200, 80, 100]
            # othertransportation: [240,960,120,120]
            othervehicle: [80, 400, 80, 100]
            park: [240, 200, 80, 100]
            parking: [240, 400, 80, 100]
            petstore: [80, 100, 80, 100]
            pharmacy: [0, 100, 80, 100]
            photostudio: [80, 300, 80, 100]
            plumber: [560, 300, 80, 100]
            postoffice: [240, 300, 80, 100]
            powerstation: [0, 400, 80, 100]
            pressclub: [0, 400, 80, 100]
            printing: [80, 300, 80, 100]
            privatecompany: [80, 300, 80, 100]
            radiostation: [0, 400, 80, 100]
            railwaystation: [320, 100, 80, 100]
            realestateagency: [80, 300, 80, 100]
            recyclestore: [0, 400, 80, 100]
            refinery: [0, 400, 80, 100]
            rentacar: [80, 400, 80, 100]
            rescueservice: [0, 400, 80, 100]
            restaurant: [560, 0, 80, 100]
            school: [0, 0, 80, 100]
            seaport: [480, 100, 80, 100]
            shoestore: [480, 400, 80, 100]
            shoppingmall: [480, 400, 80, 100]
            shrine: [160, 0, 80, 100]
            spa: [560, 400, 80, 100]
            sportsgoods: [480, 400, 80, 100]
            squashcourt: [0, 200, 80, 100]
            stadium: [0, 200, 80, 100]
            stockbroker: [320, 0, 80, 100]
            suigasoffice: [480, 300, 80, 100]
            supermarket: [400, 400, 80, 100]
            sweetsandbakers: [560, 0, 80, 100]
            swimmingpool: [0, 200, 80, 100]
            tailor: [80, 300, 80, 100]
            tandoor: [560, 0, 80, 100]
            taxistand: [560, 100, 80, 100]
            technicalservices: [80, 300, 80, 100]
            telecommunication: [0, 400, 80, 100]
            telenor: [0, 400, 80, 100]
            temple: [160, 0, 80, 100]
            tenniscourt: [0, 200, 80, 100]
            tomb: [560, 200, 80, 100]
            toystore: [480, 400, 80, 100]
            tplcorp: [0, 400, 80, 100]
            tplinsurance: [0, 400, 80, 100]
            tpllifeinsurance: [0, 400, 80, 100]
            tplmaps: [0, 400, 80, 100]
            tplproperties: [0, 400, 80, 100]
            tpltrakker: [0, 400, 80, 100]
            traininginstitute: [0, 0, 80, 100]
            travelagency: [80, 300, 80, 100]
            tuitioncenter: [0, 0, 80, 100]
            tvchannel: [0, 400, 80, 100]
            tvstudio: [0, 400, 80, 100]
            tyreshop: [80, 400, 80, 100]
            university: [0, 0, 80, 100]
            veterinarycare: [80, 100, 80, 100]
            vocationalcenter: [0, 0, 80, 100]
            volleyballcourt: [0, 200, 80, 100]
            warehouse: [0, 400, 80, 100]
            wholesale: [480, 400, 80, 100]
            woodwork: [560, 300, 80, 100]
            zoo: [240, 200, 80, 100]

    pois_search:
        url: TPLBaseMapResources.bundle/map_search_icons/POI_Icons_selected.png
        sprites:
            search_accounting: [80, 300, 80, 100]
            search_advertisingagency: [0, 400, 80, 100]
            search_agribusiness: [80, 300, 80, 100]
            search_airport: [240, 100, 80, 100]
            search_ambulance: [0, 100, 80, 100]
            search_amusementpark: [240, 200, 80, 100]
            search_aquarium: [240, 200, 80, 100]
            search_artgallery: [160, 200, 80, 100]
            search_atm: [320, 0, 80, 100]
            search_auditorium: [160, 200, 80, 100]
            search_autospareparts: [80, 400, 80, 100]
            search_bank: [320, 0, 80, 100]
            search_barber: [560, 400, 80, 100]
            search_basketballcourt: [0, 200, 80, 100]
            search_beautysalon: [560, 400, 80, 100]
            search_bookstore: [480, 400, 80, 100]
            search_booksandstationers: [480, 400, 80, 100]
            search_busstation: [400, 100, 80, 100]
            search_busstop: [400, 100, 80, 100]
            search_cafe: [560, 0, 80, 100]
            search_campground: [240, 200, 80, 100]
            search_canteen: [560, 0, 80, 100]
            search_carrepair: [80, 400, 80, 100]
            search_carshowroom: [80, 400, 80, 100]
            search_carwash: [80, 400, 80, 100]
            search_catererseventplanners: [80, 300, 80, 100]
            search_cemetery: [160, 300, 80, 100]
            search_church: [160, 0, 80, 100]
            search_cinema: [400, 200, 80, 100]
            search_cleaningandlaundry: [80, 300, 80, 100]
            search_clothingstore: [480, 400, 80, 100]
            search_college: [0, 0, 80, 100]
            search_communitycenter: [0, 300, 80, 100]
            search_computerstore: [480, 400, 80, 100]
            search_constructionservices: [560, 300, 80, 100]
            search_conveniencestore: [400, 400, 80, 100]
            search_cosmeticsstore: [480, 400, 80, 100]
            search_courierservice: [240, 300, 80, 100]
            search_court: [400, 0, 80, 100]
            search_cricketground: [0, 200, 80, 100]
            search_currencyexchange: [320, 0, 80, 100]
            search_dairyshop: [400, 400, 80, 100]
            search_dentist: [0, 100, 80, 100]
            search_dhaba: [560, 0, 80, 100]
            search_drivingschool: [80, 300, 80, 100]
            search_dryport: [480, 100, 80, 100]
            search_electricalstore: [480, 400, 80, 100]
            search_electrician: [560, 300, 80, 100]
            search_electricityoffice: [320, 300, 80, 100]
            search_electronicsstore: [480, 400, 80, 100]
            search_embassy: [400, 0, 80, 100]
            search_equipment: [560, 300, 80, 100]
            search_exhibitionhall: [80, 200, 80, 100]
            search_factory: [0, 400, 80, 100]
            search_fastfood: [560, 0, 80, 100]
            search_favourite: [0, 500, 80, 100]
            search_filterationplant: [400, 300, 80, 100]
            search_firestation: [400, 0, 80, 100]
            search_fitnesscenter: [0, 200, 80, 100]
            search_florist: [480, 400, 80, 100]
            search_flyingclub: [240, 200, 80, 100]
            search_footballground: [0, 200, 80, 100]
            search_fruitandvegetable: [400, 400, 80, 100]
            search_fuelstation: [320, 400, 80, 100]
            search_functionhall: [80, 200, 80, 100]
            search_furniturestore: [480, 400, 80, 100]
            search_giftstore: [480, 400, 80, 100]
            search_glasswork: [560, 300, 80, 100]
            search_governmentbuilding: [400, 0, 80, 100]
            search_guesthouse: [480, 200, 80, 100]
            search_gurdwara: [160, 0, 80, 100]
            search_hardwareandsanitary: [560, 300, 80, 100]
            search_herbalclinic: [0, 100, 80, 100]
            search_hijamacenter: [0, 100, 80, 100]
            search_hikmat: [0, 100, 80, 100]
            search_historicalplace: [560, 200, 80, 100]
            search_hockeyground: [0, 200, 80, 100]
            search_homegoodsstore: [480, 400, 80, 100]
            search_homeopathicclinic: [0, 100, 80, 100]
            search_hospital: [0, 100, 80, 100]
            search_hostel: [480, 200, 80, 100]
            search_hotel: [480, 200, 80, 100]
            search_icecreamparlor: [560, 0, 80, 100]
            search_imambargah: [160, 0, 80, 100]
            search_indoorgames: [160, 200, 80, 100]
            search_insuranceagency: [80, 300, 80, 100]
            search_intersection: [240, 200, 80, 100]
            search_jazz: [0, 400, 80, 100]
            search_jewellerystore: [480, 400, 80, 100]
            search_juicebar: [560, 0, 80, 100]
            search_khokha: [480, 400, 80, 100]
            search_laboratory: [0, 100, 80, 100]
            search_langar: [0, 300, 80, 100]
            search_lawenforcement: [160, 100, 80, 100]
            search_lawyer: [80, 300, 80, 100]
            search_library: [80, 0, 80, 100]
            search_localadministration: [400, 0, 80, 100]
            search_lpgsupplier: [80, 300, 80, 100]
            search_madrassa: [0, 0, 80, 100]
            search_materialsupplier: [560, 300, 80, 100]
            search_meatstore: [400, 400, 80, 100]
            search_medicalclinic: [0, 100, 80, 100]
            search_metalwork: [560, 300, 80, 100]
            search_mill: [0, 400, 80, 100]
            search_mobileshop: [480, 400, 80, 100]
            search_moneytransfer: [320, 0, 80, 100]
            search_monument: [560, 200, 80, 100]
            search_mosque: [240, 0, 80, 100]
            search_motel: [480, 200, 80, 100]
            search_motorbikerepair: [160, 400, 80, 100]
            search_motorbikeshowroom: [160, 400, 80, 100]
            search_museum: [560, 200, 80, 100]
            search_newspaper: [0, 400, 80, 100]
            search_ngo: [0, 300, 80, 100]
            search_oiltraders: [80, 300, 80, 100]
            search_optician: [480, 400, 80, 100]
            search_orphanage: [0, 300, 80, 100]
            search_otherbeautyandspa: [560, 400, 80, 100]
            search_othercivicutilities: [0, 400, 80, 100]
            search_otherconstruction: [560, 300, 80, 100]
            search_othereducation: [0, 0, 80, 100]
            search_otherevents: [80, 200, 80, 100]
            search_otherfinance: [320, 0, 80, 100]
            search_otherfood: [560, 0, 80, 100]
            search_othergeneral: [0, 400, 80, 100]
            search_othergovernment: [400, 0, 80, 100]
            search_othergrocery: [400, 400, 80, 100]
            search_otherindustry: [0, 400, 80, 100]
            search_otherlocalbusinesses: [80, 300, 80, 100]
            search_otherlodging: [480, 200, 80, 100]
            search_othermedia: [0, 400, 80, 100]
            search_othermedical: [0, 100, 80, 100]
            search_otherrecreation: [240, 200, 80, 100]
            search_otherreligion: [160, 0, 80, 100]
            search_othershopping: [480, 400, 80, 100]
            search_othersocialservice: [0, 300, 80, 100]
            search_othersports: [0, 200, 80, 100]
            search_othertourist: [560, 200, 80, 100]
            # search_othertransportation: [240,960,120,120]
            search_othervehicle: [80, 400, 80, 100]
            search_park: [240, 200, 80, 100]
            search_parking: [240, 400, 80, 100]
            search_petstore: [80, 100, 80, 100]
            search_pharmacy: [0, 100, 80, 100]
            search_photostudio: [80, 300, 80, 100]
            search_plumber: [560, 300, 80, 100]
            search_postoffice: [240, 300, 80, 100]
            search_powerstation: [0, 400, 80, 100]
            search_pressclub: [0, 400, 80, 100]
            search_printing: [80, 300, 80, 100]
            search_privatecompany: [80, 300, 80, 100]
            search_radiostation: [0, 400, 80, 100]
            search_railwaystation: [320, 100, 80, 100]
            search_realestateagency: [80, 300, 80, 100]
            search_recyclestore: [0, 400, 80, 100]
            search_refinery: [0, 400, 80, 100]
            search_rentacar: [80, 400, 80, 100]
            search_rescueservice: [0, 400, 80, 100]
            search_restaurant: [560, 0, 80, 100]
            search_school: [0, 0, 80, 100]
            search_seaport: [480, 100, 80, 100]
            search_shoestore: [480, 400, 80, 100]
            search_shoppingmall: [480, 400, 80, 100]
            search_shrine: [160, 0, 80, 100]
            search_spa: [560, 400, 80, 100]
            search_sportsgoods: [480, 400, 80, 100]
            search_squashcourt: [0, 200, 80, 100]
            search_stadium: [0, 200, 80, 100]
            search_stockbroker: [320, 0, 80, 100]
            search_suigasoffice: [480, 300, 80, 100]
            search_supermarket: [400, 400, 80, 100]
            search_sweetsandbakers: [560, 0, 80, 100]
            search_swimmingpool: [0, 200, 80, 100]
            search_tailor: [80, 300, 80, 100]
            search_tandoor: [560, 0, 80, 100]
            search_taxistand: [560, 100, 80, 100]
            search_technicalservices: [80, 300, 80, 100]
            search_telecommunication: [0, 400, 80, 100]
            search_telenor: [0, 400, 80, 100]
            search_temple: [160, 0, 80, 100]
            search_tenniscourt: [0, 200, 80, 100]
            search_tomb: [560, 200, 80, 100]
            search_toystore: [480, 400, 80, 100]
            search_tplcorp: [0, 400, 80, 100]
            search_tplinsurance: [0, 400, 80, 100]
            search_tpllifeinsurance: [0, 400, 80, 100]
            search_tplmaps: [0, 400, 80, 100]
            search_tplproperties: [0, 400, 80, 100]
            search_tpltrakker: [0, 400, 80, 100]
            search_traininginstitute: [0, 0, 80, 100]
            search_travelagency: [80, 300, 80, 100]
            search_tuitioncenter: [0, 0, 80, 100]
            search_tvchannel: [0, 400, 80, 100]
            search_tvstudio: [0, 400, 80, 100]
            search_tyreshop: [80, 400, 80, 100]
            search_university: [0, 0, 80, 100]
            search_veterinarycare: [80, 100, 80, 100]
            search_vocationalcenter: [0, 0, 80, 100]
            search_volleyballcourt: [0, 200, 80, 100]
            search_warehouse: [0, 400, 80, 100]
            search_wholesale: [480, 400, 80, 100]
            search_woodwork: [560, 300, 80, 100]
            search_zoo: [240, 200, 80, 100]

    restIcons:
        url: TPLBaseMapResources.bundle/BaseMapIcons/restIcons.png
        sprites:
            currentLocationMarker: [0, 0, 32, 32]
            routeMarker: [90, 152, 160, 160]
            routeMarkerTilt: [154, 72, 80, 80]
#            endflag: [168, 0, 72, 72]
            droppin: [0, 152, 90, 90]
            favspin: [0, 72, 74, 75]
            aftarispin: [32, 0, 136, 49]
            selectedPOIPin: [0, 152, 90, 90]

    routeMarker:
        url: TPLBaseMapResources.bundle/BaseMapIcons/heading_arrow_nav.png
        filtering: mipmap
        sprites:
            SPRITE: [0, 0, 160, 160]

    defaultMarker:
        url: TPLBaseMapResources.bundle/BaseMapIcons/default_marker.png

    routeMarkerTilt:
        url: TPLBaseMapResources.bundle/BaseMapIcons/heading_arrow_tilt.png
        filtering: mipmap
        sprites:
            SPRITE: [0, 0, 80, 80]

    # startflag:
    #     url: images/start_flag.png
    #     filtering: mipmap
    #     sprites:
    #         SPRITE: [0, 0, 75, 50]

#    endFlag:
#        url: TPLBaseMapResources.bundle/Navigation/navigation_finishflag.png
#        filtering: mipmap
#        sprites:
#            SPRITE: [0, 0, 48, 48]

# Will have to define styles for each icon seperately as the textures can't be directly called in the draw function of the layer
# The style will tell the type of object it can be applied to (points for pois) and the applicable texture file
# if the texture is not referenced in a style, then we will get a error
styles:
    transparent_polyline:
        base: lines
        blend: inlay
        shaders:
            blocks:
                color:
                    color.a = .5;
    transparent_polygon:
        base: polygons
        blend: inlay
        shaders:
            blocks:
                color: |
                    color.a = .5;
    icons:
        base: points
        texture: pois
        blend_order: 2
    search_icons:
        base: points
        texture: pois_search
        blend_order: 3
    currentLocationMarker:
        base: points
        texture: restIcons
        blend_order: 5

    defaultMarker:
        base: points
        texture: defaultMarker
        blend_order: 5

    live_location_marker:
        base: points
        blend_order: 8
    routeMarker:
        base: points
        texture: routeMarker
    # routeMarkerTilt:
    #     base: points
    #     blend: overlay
    #     texture: routeMarkerTilt
    # startflag:
    #     base: points
    #     texture: startflag
#    endflag:
#        base: points
#        texture: endflag
        
    droppin:
        base: points
        texture: restIcons
        blend_order: 7
        
    pinmarker:
        base: points
        texture: pinmarker
        
    recordroutepin:
        base: points
        # blend_order: 5
    text-blend-order:
        base: text
        blend_order: 1
    pois_text:
        base: text
    urdu_text:
        base: text
        blend: inlay
    english_text:
        base: text
        blend: inlay
    road_text:
        base: text
        blend: inlay
    lines2:
        base: lines
    lines3:
        base: lines
    # Color variation in 3d-buildings
    solidbuildings_night:
        base: polygons
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((v_world_position.z*.01 + .9),1.)-0.2);
                    color.r*=0.6;
                    color.g*=0.6;
                    color.b*=0.7;

    solidbuildings_day:
        base: polygons
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((v_world_position.z*.01 + .9),1.));

    cBuildingWindows_night:
        base: polygons
        mix: [geometry-normal,functions-map]
        shaders:
            blocks:
                color: |
                    if (!isWall()) {
                        color.rgb *= vec3(min((worldPosition().z*.01 + .9),1.)-0.2);
                    }else{
                        color.rgb *= (vec3(min((v_world_position.z*.01 + .9),1.))-vec3(0.2*step(0.1,sin(worldPosition().z))))-0.2; //vec3(0.2*(max(ceil(0.9*sin(worldPosition().z)) , 0.0))*(ceil(max( abs(sin(0.4*(abs(v_world_position.x) + abs(v_world_position.y) )))-.5 , 0.0)      )) );
                    }
                    color.r*=0.6;
                    color.g*=0.6;
                    color.b*=0.7;

    cBuildingWindows_day:
        base: polygons
        mix: [geometry-normal,functions-map]
        shaders:
            blocks:
                color: |
                    if (!isWall()) {
                        color.rgb *= vec3(min((worldPosition().z*.01 + .9),1.));
                    }else{
                        color.rgb *= vec3(min((v_world_position.z*.01 + .9),1.))-vec3(0.2*(max(ceil(0.9*sin(worldPosition().z)) , 0.0))*(ceil(max( abs(sin(0.4*(abs(v_world_position.x) + abs(v_world_position.y) )))-.5 , 0.0)      )) );
                    }

    glassBuilding_night:
        base: polygons
        shaders:
            blocks:
                color: |
                    color.rgb *= (vec3(min((v_world_position.z*.01 + .9),1.),min((v_world_position.z*.003 + .8),1.),min((v_world_position.z*.003 + .83),1.))+vec3(1.2*(max(abs(sin(0.4*worldPosition().y)),0.95)-0.95))+vec3(1.2*(max(abs(sin(0.4*worldPosition().z)),0.95)-0.95))-0.2);
                    color.r*=0.6;
                    color.g*=0.6;
                    color.b*=0.7;

    glassBuilding_day:
        base: polygons
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((v_world_position.z*.01 + .9),1.),min((v_world_position.z*.003 + .8),1.),min((v_world_position.z*.003 + .83),1.))+vec3(1.2*(max(abs(sin(0.4*worldPosition().y)),0.95)-0.95))+vec3(1.2*(max(abs(sin(0.4*worldPosition().z)),0.95)-0.95));

    dashedline:
        base: lines
        texcoords: true
        shaders:
            defines:
                background: vec3(0.867, 0.867, 0.867)
            blocks:
                color: |
                    // blend line 50/50 between two colors
                    float t = fract(v_texcoord.y);
                    float e = 0.1; // edge feather
                    vec3 v = vec3(
                        smoothstep(.0, e, t) *
                        (1. - smoothstep(.5, .5 + e, t))
                    );
                    color.rgb = mix(color.rgb, background, v);

    generative-random:
        shaders:
            blocks:
                global: |
                    // 1D Random for 1 and 2 dimentions
                    // ================================
                    float random (float x) {
                        return fract(sin(x)*1e4);
                    }
                    float random (vec2 xy) {
                        return fract(sin(dot(xy.xy, vec2(12.9898,78.233)))* 43758.5453123);
                    }
                    //
                    // 2D Random for 2 dimentions
                    // ================================
                    vec2 random2 (vec2 xy) {
                        return fract(sin(vec2(dot(xy,vec2(127.1,311.7)),dot(xy,vec2(269.5,183.3))))*43758.5453);
                    }
                    //
                    // 3D Random for 2 dimentions
                    // ================================
                    vec3 random3 (vec2 xy) {
                        return fract(sin(vec3( dot(xy,vec2(127.1,311.7)), dot(xy,vec2(269.5,183.3)), dot(xy,vec2(419.2,371.9)) ))*43758.5453);
                    }
                    vec3 random3 (vec3 c) {
                        float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
                        vec3 r;
                        r.z = fract(512.0*j);
                        j *= .125;
                        r.x = fract(512.0*j);
                        j *= .125;
                        r.y = fract(512.0*j);
                        return r-0.5;
                    }
    generative-noise:
        mix: generative-random
        shaders:
            blocks:
                global: |
                    // 1D Value Noise for 1, 2 and 3 dimentions
                    // ================================
                    float noise (in float x) {
                        float i = floor(x);
                        float f = fract(x);
                        float u = f * f * (3.0 - 2.0 * f);
                        return mix(random(i), random(i + 1.0), u);
                    }
                    float noise (vec2 xy) {
                        vec2 i = floor(xy);
                        vec2 f = fract(xy);
                        float a = random(i);
                        float b = random(i + vec2(1.0, 0.0));
                        float c = random(i + vec2(0.0, 1.0));
                        float d = random(i + vec2(1.0, 1.0));
                        vec2 u = f * f * (3.0 - 2.0 * f);
                        return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
                    }
                    float noise (vec3 xyz) {
                        const vec3 step = vec3(110.0, 241.0, 171.0);
                        vec3 i = floor(xyz);
                        vec3 f = fract(xyz);
                        float n = dot(i, step);
                        vec3 u = f * f * (3.0 - 2.0 * f);
                        return mix( mix(mix(random(n + dot(step, vec3(0,0,0))),
                                            random(n + dot(step, vec3(1,0,0))),
                                            u.x),
                                        mix(random(n + dot(step, vec3(0,1,0))),
                                            random(n + dot(step, vec3(1,1,0))),
                                            u.x),
                                        u.y),
                                    mix(mix(random(n + dot(step, vec3(0,0,1))),
                                        random(n + dot(step, vec3(1,0,1))),
                                        u.x),
                                        mix(random(n + dot(step, vec3(0,1,1))),
                                            random(n + dot(step, vec3(1,1,1))),
                                            u.x),
                                    u.y),
                                u.z);
                    }
                    //
                    // Simplex Noise
                    const float F3 =  0.3333333;
                    const float G3 =  0.1666667;
                    float snoise (vec3 p) {
                        vec3 s = floor(p + dot(p, vec3(F3)));
                        vec3 x = p - s + dot(s, vec3(G3));
                        vec3 e = step(vec3(0.0), x - x.yzx);
                        vec3 i1 = e*(1.0 - e.zxy);
                        vec3 i2 = 1.0 - e.zxy*(1.0 - e);
                        vec3 x1 = x - i1 + G3;
                        vec3 x2 = x - i2 + 2.0*G3;
                        vec3 x3 = x - 1.0 + 3.0*G3;
                        vec4 w, d;
                        w.x = dot(x, x);
                        w.y = dot(x1, x1);
                        w.z = dot(x2, x2);
                        w.w = dot(x3, x3);
                        w = max(0.6 - w, 0.0);
                        d.x = dot(random3(s), x);
                        d.y = dot(random3(s + i1), x1);
                        d.z = dot(random3(s + i2), x2);
                        d.w = dot(random3(s + 1.0), x3);
                        w *= w;
                        w *= w;
                        d *= w;
                        return dot(d, vec4(52.0));
                    }
    generative-fbm:
        mix: generative-noise
        shaders:
            defines:
                NUM_OCTAVES: 5
            blocks:
                global: |
                    // Fractional Brownian motion for 1 and 2 dimensions
                    float fbm (float x) {
                        float v = 0.0;
                        float a = 0.5;
                        float shift = float(100.0);
                        for (int i = 0; i < int(NUM_OCTAVES); ++i) {
                            v += a * noise(x);
                            x = x * 2.0 + shift;
                            a *= 0.5;
                        }
                        return v;
                    }
                    float fbm (vec2 xy) {
                        float v = 0.0;
                        float a = 0.5;
                        vec2 shift = vec2(100.0);
                        mat2 rot = mat2(cos(0.5), sin(0.5),
                                        -sin(0.5), cos(0.50));
                        for (int i = 0; i < int(NUM_OCTAVES); ++i) {
                            v += a * noise(xy);
                            xy = rot * xy * 2.0 + shift;
                            a *= 0.5;
                        }
                        return v;
                    }

    geometry-normal:
        shaders:
            blocks:
                global: |
                    // Ask to the geometry normals if this surface is a Wall
                    bool isWall() {
                        return dot(worldNormal(),vec3(0.,0.,1.)) <= 0.01;
                    }
                    //
                    // Ask to the geometry normals if this surface is a roof
                    bool isRoof() {
                        return dot(worldNormal(),vec3(0.,0.,1.)) >= 0.99;
                    }


    filter-grain:
        mix: generative-fbm
        shaders:
            defines:
                GRAIN_AMOUNT: .5
                NUM_OCTAVES: 2
            blocks:
                global: |
                    // Grain fractor on screen space with less concetration in the center
                    // ================================
                    float grain(){
                        #ifdef TANGRAM_FRAGMENT_SHADER
                        vec2 pos = gl_FragCoord.xy;
                        vec2 st = pos/u_resolution.xy-vec2(.5);
                        return dot(st,st)+(fbm(pos*0.6)*0.1);
                        #else
                        return 0.0;
                        #endif
                    }
                filter: |
                    // Apply the grain in the amount defined on GRAIN_AMOUNT
                    color.rgb -= grain()*GRAIN_AMOUNT;

    roadsTraffic:
        animated: true
        texcoords: true
        lighting: true
        base: lines
        mix: filter-grain
        material:
            diffuse: .9
            emission: 0.0
        shaders:
            blocks:
                color: |
                    vec2 st = fract(v_texcoord.xy*vec2(.4,.1));
                    float dir = -0.65;
                    if(color.r>=0.9 && color.g<=0.1 && color.b<=0.1 ){
                        dir = -0.03;
                    }else if(color.r>=0.9 && color.g>=0.9 && color.b<=0.1 ){
                        dir = -0.2;
                    }
                    if (v_color.g < 0.5 ) {
                       if (st.x < 0.5) {
                         st.y = st.y; //(1.-st.y) for 2-ways
                       }
                       st.x = fract(st.x*2.0);
                    }
                    float v = u_time*dir;
                    st *= vec2(4.,1.);
                    st += vec2(1.);
                    vec2 ipos = floor(st);
                    vec2 fpos = fract(st);
                    fpos = fpos+vec2(.0,v*random(ipos.x));
                    ipos = floor(fpos*vec2(10.));
                    fpos = fract(fpos*vec2(1.,10.));

                    st = worldPosition().xy*0.04;
                    float n = noise(st);

                    if(color.r>=0.9 && color.g<=0.1 && color.b<=0.1 ){
                        color.rgba -= vec4(0.0,-1.0,0.0,.0) * max(0.0,(0.7-dot(fpos-.5,fpos-vec2(.5,.9))*3.) * step(0.2,random(ipos.y)));
                    }else if(color.r>=0.9 && color.g>=0.9 && color.b<=0.1 ){
                        color.rgba -= vec4(0.75,1.0,-.5,0.) * max(0.0,(0.7-dot(fpos-.5,fpos-vec2(.5,.9))*3.) * step(0.5,random(ipos.y)));
                    }else{
                        color.rgba -= vec4(-1.0,-0.5,-1.0,0.0) * max(0.0,(0.7-dot(fpos-.5,fpos-vec2(.5,.9))*3.) * step(0.8,random(ipos.y)));
                    }

# define the source of the tiles we are using
sources:
    local:
        type: MVT
        url:
        url_params:
            apikey: global.sdk_api_key
        min_zoom: 1
        max_zoom: 17
    local2:
        type: MVT
        url:
        url_params:
            apikey: global.sdk_api_key
        min_zoom: 14
        max_zoom: 17
    local-pois:
        type: MVT
        url:
        url_params:
            apikey: global.sdk_api_key
        min_zoom: 10
        max_zoom: 17
    generalTraffic:
        type: MVT
        url:
        url_params:
            apikey: global.sdk_api_key
        min_display_zoom: 5
        max_zoom: 17

fonts:
    SFProDisplay:
        - weight: normal
          url: assets.bundle/fonts/SF-Pro-Display-Regular.ttf
        - weight: bold
          url: assets.bundle/fonts/SF-Pro-Display-Bold.ttf
        - weight: 400
          url: assets.bundle/fonts/SF-Pro-Display-Medium.ttf
# As we are using the Composite GeoJSON for the source, each layer drawn here is the object class, the layer name acts as the layer from
# source JSON if we don't explicitly define it, boundary layer here is using the data in the JSON that is followed by the "boundary": key word
# before the features are defined
layers:

    traffic:
        data: { source: generalTraffic , layer: category_traffic}
        filter: function(){ return global.trafficStatus == true}
        highway-m:
            # apply a function in the filter, the resulting objects are used
            filter: function () { return (feature.p == 6 )}
            draw:
                lines:
                    order: function() {if(feature.s=='#d50000'){return 119;}else if(feature.s=='#f3450e'){return 118;}else if(feature.s=='#ffff00'){return 117;}else if(feature.s=='#a5d414'){return 116;}else if(feature.s=='#0bce0a'){return 115;}else{return 114;} }
                    color: function () { return feature.s; }
                    cap: round
                    width: [[5, 0.1px],[10,0.5px],[15,2px],[20,7px]]
        highway-nm:
            filter: function () { return (feature.p == 5 )}
            draw:
                lines:
                    order: function() {if(feature.s=='#d50000'){return 119;}else if(feature.s=='#f3450e'){return 118;}else if(feature.s=='#ffff00'){return 117;}else if(feature.s=='#a5d414'){return 116;}else if(feature.s=='#0bce0a'){return 115;}else{return 114;} }
                    cap: round
                    color: function () { return feature.s; }
                    width: [[5, 0.1px],[10,0.5px],[15,2px],[20,6px]]
        main-roads:
            filter: function() { return feature.p == 4 && $zoom >= 7 ; }
            draw:
                lines:
                    order: function() {if(feature.s=='#d50000'){return 119;}else if(feature.s=='#f3450e'){return 118;}else if(feature.s=='#ffff00'){return 117;}else if(feature.s=='#a5d414'){return 116;}else if(feature.s=='#0bce0a'){return 115;}else{return 114;} }
                    color: function () { return feature.s; }
                    cap: round
                    width: [[7, 0.125px],[10,0.25px],[15,1.5px],[20,6px]]

        secondary-roads:
            filter: function() { return feature.p == 3; }
            draw:
                lines:
                    order: function() {if(feature.s=='#d50000'){return 119;}else if(feature.s=='#f3450e'){return 118;}else if(feature.s=='#ffff00'){return 117;}else if(feature.s=='#a5d414'){return 116;}else if(feature.s=='#0bce0a'){return 115;}else{return 114;} }
                    color: function () { return feature.s; }
                    cap: round
                    width: [[10, 0.125px],[15,1.25px],[20,5px]]

    terrain:
        data: { source: satellite }
        filter: function() { return global.currentTime == 'satellite' }
        draw:
            raster:
                order: 0

    touch:
        data: { source: touch }
        selectedRoute:
            filter: { type: selectedRoute}
            draw:
                lines:
                    color: global.colorscheme.selected_route
                    cap: round
                    order: 310
                    width: [ [ 7, 2px ],[ 10,3px ],[ 15,6px ],[ 20,15px ] ]
                    outline:
                        color: global.colorscheme.selected_route_outline
                        width: [[5, 0.1px],[10, 0.5px],[15,1px],[20,2px]]

        routeStartFlag:
            data: { source: routeStartFlag }
            routeStartFlag:
                filter: { type: routeStartFlag }
                draw:
                    routeStartFlag:
                        priority: 1
                        order: 300
                        sprite: SPRITE
                        size: [[12, 22px], [26, 22px]]

#        endFlag:
#            data: { source: endFlag }
#            endFlag:
#                filter: { type: endFlag }
#                draw:
#                    endFlag:
#                        priority: 1
#                        order: 330
#                        sprite: SPRITE
#                        size: [[12, 22px], [26, 22px]]
        segmentedRoute:
            filter: { type: segmentedRoute}
            draw:
                lines:
                    color:  global.colorscheme.segment
                    outline:
                        color: global.colorscheme.segment_outline
                        width: 1px
                    order: 320
                    width: [ [ 7, 2px ],[ 10,3px ],[ 15,6px ],[ 20,15px ] ]

        Route:
            filter: { type: Route}
            draw:
                lines:
                    priority: 5
                    color: global.colorscheme.nonselected_route
                    cap: round
                    order: 300
                    width: [ [ 7, 2px ],[ 10,3px ],[ 15,6px ],[ 20,15px ] ]
                    outline:
                        color: global.colorscheme.nonselected_route_outline
                        width: 1px
                filter:
                    name: true
        line:
            filter: { type: line }
            draw:
                lines:
                    color: function () { return feature.color || 'red'; }
                    order: 50
                    width: 5px
        poly:
            filter: { type: poly }
            draw:
                polygons:
                    color: red
                    order: 40
                    width: 5px
        
    startflag:
            filter: { type: startflag }
            draw:
                startflag:
                    priority: 1
                    order: 100
                    sprite: SPRITE
                    size: [[12, 28px], [15, 22px]]
                    interactive: true
#    endflag:
#            filter: { type: endflag }
#            draw:
#                endflag:
#                    priority: 1
#                    order: 100
#                    sprite: SPRITE
#                    size: [[12, 22px], [21, 22px]]
#                    interactive: true
#                    text:
#                        text_source: |
#                                function() {
#                                    return feature.display_endflag_na;
#                                }
#                        transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
#                        font:
#                            family: global.font_eng
#                            fill: global.colorscheme.endflag
#                            size: 13px
#                            stroke: { color: global.colorscheme.poi_stroke , width: 1.0 }

    livetrafficlayer:
        data: { source: livetrafficlayer }
        trafficP5:
            filter: function() { return feature.roadpriority=='5'; }
            draw:
                roadsTraffic:
                    color: function () { return feature.color || 'red'; }
                    order: function() {if(feature.color=='#ff0000'){return 52;}if(feature.color=='#008000'){return 51;}else{return 50;} }
                    cap: round
                    width: [[5, 0.4px],[10,2px],[12,3.5px],[15,15.5px],[21,25px]]

        trafficP4:
            filter: function() { return feature.roadpriority=='4'; }
            draw:
                roadsTraffic:
                    color: function () { return feature.color || 'red'; }
                    order: function() {if(feature.color=='#ff0000'){return 52;}if(feature.color=='#008000'){return 51;}else{return 50;} }
                    cap: round
                    width: [[7, 0.5px],[10,1px],[15,7px],[20,25px]]

        trafficP3:
            filter: function() { return feature.roadpriority=='3'; }
            draw:
                roadsTraffic:
                    color: function () { return feature.color || 'red'; }
                    order: function() {if(feature.color=='#ff0000'){return 52;}if(feature.color=='#008000'){return 51;}else{return 50;} }
                    cap: round
                    width: [[10, 1.25px],[15,4px],[20,23px]]

        trafficP2:
            filter: function() { return feature.roadpriority=='2'; }
            draw:
                roadsTraffic:
                    color: function () { return feature.color || 'red'; }
                    order: function() {if(feature.color=='#ff0000'){return 52;}if(feature.color=='#008000'){return 51;}else{return 50;} }
                    cap: round
                    width: [[12, 1.5px],[15,4px],[20,20px]]

        trafficP1:
            filter: function() { return feature.roadpriority=='1'; }
            draw:
                roadsTraffic:
                    color: function () { return feature.color || 'red'; }
                    order: function() {if(feature.color=='#ff0000'){return 52;}if(feature.color=='#008000'){return 51;}else{return 50;} }
                    cap: round
                    width: [[14, 1px],[15,3px],[20,18px]]

    locationmarker:
        data: { source: locationmarker }
        currentLocationMarker:
            filter: { type: currentLocationMarker }
            draw:
                currentLocationMarker:
                    priority: 0.5
                    interactive: true
                    sprite: currentLocationMarker
                    size: [[12, 22px], [15, 22px]]
                    collide: false

    droppinmarker:
        data: { source: droppinmarker }
        droppin:
            filter: { type: droppin }
            draw:
                droppin:
                    priority: 0.5
                    sprite: droppin
                    size: [[3, 22px], [21, 22px]]
                    
    recordroutepin:
        data: {source : recordroutepin}
        draw:
            recordroutepin:
                priority: 1
                size: 14px
                color: '#F44336'


    defaultMarker:
        data: {source : defaultMarker}
        draw:
            defaultMarker:
                priority: 1
                size: 20px
                collide: false
        
    world:
        data: { source: local, layer: [world,world150,world500] }
        draw:
            polygons:
                # the higher the order, the greater the importance when drawn
                order: 1
                color: global.colorscheme.world
        continent-a:
            filter: function() { return (feature.n.slice(0, 1) == 'A')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.continent_a
        continent-p:
            filter: function() { return (feature.n.slice(0, 3) == 'Pak')}
            day:
                filter: function() { return global.currentTime == 'day' }
                draw:
                    polygons:
                        order: 1
                        color:
                            [
                              [1, '#fbf8f3'],
                              [10, '#f5f0e4'],
                              [15, '#f8f9fa'],

                            ]
            other:
                filter: function() { return global.currentTime != 'day' }
                draw:
                    polygons:
                        order: 1
                        color: global.colorscheme.continent_p
        continent-b:
            filter: function() { return (feature.n.slice(0, 1) == 'B')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.continent_b
        continent-c:
            filter: function() { return (feature.n.slice(0, 1) == 'C')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.continent_c
        continent-i:
            filter: function() { return (feature.n.slice(0, 1) == 'I')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.continent_i
        continent-t:
            filter: function() { return (feature.n.slice(0, 1) == 'T')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.continent_t
        continent-r:
            filter: function() { return (feature.n.slice(0, 1) == 'R')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.continent_r
        continent-u:
            filter: function() { return (feature.n.slice(0, 1) == 'U')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.continent_u
        continent-s:
            filter: function() { return (feature.n.slice(0, 1) == 'S')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.continent_s
        ocean:
            filter: function() { return (feature.n == 'ocean')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.water


    borders:
        data: { source: local, layer: [borders,borders150,borders500]  }
        country3:
            filter: { p: [0, 1], $zoom: { min: 1 }  }
            draw:
                lines:
                    order: 3
                    color: global.colorscheme.borders_1
                    width: [[2, 0px],[3, 0px],[4,5px],[5,8px],[6,10px],[9,8px],[10,5px]]
                lines2:
                    order: 4
                    color: global.colorscheme.borders_2
                    width: [[2, 0px],[3, 0px],[4,2px],[5,4px],[6,5px],[9,4px],[10,3px]]
                lines3:
                    order: 5
                    color: global.colorscheme.borders_3
                    width: 1px

        province:
            filter: { p: 5 ,$zoom: { max: 10 }}
            draw:
                lines:
                    order: 30
                    color: global.colorscheme.borders_1
                    width: [[5,5px],[10,3px],[20,1px]]
                lines2:
                    order: 40
                    color: global.colorscheme.province
                    width: 1px

    citiesfill:
        data: { source: local, layer: [citiesfill,citiesfill150] }
        day:
            filter: function() { return global.currentTime == 'day' }
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 5
                    color: [[8,global.colorscheme.citiesfill8_day],[15,global.colorscheme.citiesfill15_day]]
        
    roads:
        data: { source: local, layer: [roads,roads150,roads500] }
        motorway:
            filter: function () { return (feature.p == 6 )}
            draw:
                lines:
                    order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if ((feature.gt==10 && feature.gf == 10) ){
                                        return 19;
                                    }
                                    else
                                        return 25;
                                }
                                return 25;
                            }
                    color: global.colorscheme.motorway
                    width: [[5, 1.2px], [6, 1.45px], [7, 1.95px], [8, 1.97px], [9, 2px], [10, 2.55px], [11, 2.65px], [12, 2.7px], [13, 3px], [14, 4.8px], [15, 8.05px], [16, 15.6px], [17, 13px], [18, 25px], [19, 50px], [20, 60px]]
                    outline:
                        order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if ((feature.gt==10 && feature.gf == 10) ){
                                        return 19;
                                    }
                                    else
                                        return 25;
                                }
                                return 20;
                            }
                        color: global.colorscheme.motorway_outline
                        width: [[5, 0.0072px], [10, 1.2px], [15, 1.2px], [20, 5.16px]]
        highway:
            filter: function () { return (feature.p == 5 ) && $zoom >= 6 }
            draw:
                lines:
                    order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if ((feature.gt==10 && feature.gf == 10) ){
                                        return 19;
                                    }
                                    else
                                        return 25;
                                }
                                return 24;
                            }
                    color: global.colorscheme.highway
                    width: [[6, 0.4px], [7, 0.5px], [8, 0.55px], [9, 2.1px], [10, 2.4px], [11, 2.55px], [12, 2.65px], [13, 2.75px], [14, 3.3px], [15, 4.5px], [16, 8px], [17, 13.15px], [18, 20.15px], [19, 40px], [20, 60px]]
                    outline:
                        order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if ((feature.gt==10 && feature.gf == 10) ){
                                        return 19;
                                    }
                                    else
                                        return 20;
                                }
                                return 20;
                            }
                        color: global.colorscheme.highway_outline
                        width: [[5, 0.0072px], [10, 0.24px], [15, 1.2px]]
        main-roads:
            filter: function() { return feature.p == 4 && $zoom >= 6 ; }
            draw:
                lines:
                    order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if (feature.gt==10 && feature.gf == 10 ){
                                        return 19;
                                    }
                                    else
                                        return 25;
                                }
                                return 23;
                            }
                    color: global.colorscheme.main_roads
                    width: [[6, 0.4px], [7, 0.5px], [8, 0.55px], [9, 1.05px], [10, 1.65px], [11, 2px], [12, 2.55px], [13, 3.15px], [14, 4.2px], [15, 4.5px], [16, 8px], [17, 13.15px], [18, 20.15px], [19, 40px], [20, 60px]]
                    outline:
                        order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if (feature.gt==10 && feature.gf == 10 ){
                                        return 19;
                                    }
                                    else
                                        return 20;
                                }
                                return 20;
                            }
                        color: global.colorscheme.main_roads_outline
                        width: [[10, 0.36px], [15, 1.2px]]
        secondary-roads:
            filter: function() { return feature.p == 3 && $zoom >= 8 ; }
            draw:
                lines:
                    order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if ((feature.gt==10 && feature.gf == 10) ){
                                        return 19;
                                    }
                                    else
                                        return 25;
                                }
                                return 22;
                            }
                    color: global.colorscheme.secondary_roads
                    width: [[8, 0.65px], [9, 0.8px], [10, 1.5px], [11, 1.65px], [12, 1.75px], [13, 1.9px], [14, 4.2px], [15, 2.55px], [16, 5.45px], [17, 8.05px], [18, 13.05px], [19, 24px], [20, 40px]]
                    outline:
                        order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if ((feature.gt==10 && feature.gf == 10) ){
                                        return 19;
                                    }
                                    else
                                        return 20;
                                }
                                return 20;
                            }
                        color: global.colorscheme.secondary_roads_outline
                        width: [[15, 0.84px]]
        tertiary-roads:
            filter: function() { return feature.p == 2 && $zoom >= 14 ; }
            draw:
                lines:
                    order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if ((feature.gt==10 && feature.gf == 10) ){
                                        return 19;
                                    }
                                    else
                                        return 25;
                                }
                                return 21;
                            }
                    color: global.colorscheme.tertiary_roads
                    width: [[14, 0.65px], [15, 2.2px], [16, 4.05px], [17, 6px], [18, 11.25px], [19, 20.5px], [20, 35px]]
                    outline:
                        order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if ((feature.gt==10 && feature.gf == 10) ){
                                        return 19;
                                    }
                                    else
                                        return 20;
                                }
                                return 20;
                            }
                        color: global.colorscheme.tertiary_roads_outline
                        width: [[14, 0.24px]]
        streets:
            filter: function() { return feature.p == 1 && $zoom >= 14 ; }
            draw:
                lines:
                    order: 20
                    color: global.colorscheme.streets
                    width: [[14, 1.75px], [15, 2.2px], [16, 5.05px], [17, 8.05px], [18, 13.05px], [19, 24px], [20, 40px]]
                    outline:
                        order: 20
                        color: "#CFD2D7"
                        width: [[14, 0.3px], [15, 0.43px], [17, 0.72px], [20, 3px]]
        labels_street_16_17:
            filter: { $zoom: [ 15, 16, 17 ], p: [ 1 ] }
            draw:
                road_text:
                    priority: 35
                    text_source: n
                    anchor: center
                    align: center
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: global.colorscheme.secondary_text_13
                        size: [ [ 16, 9px ], [ 17, 10px ] ]
        labels_street_18_19:
            filter: { $zoom: [ 18, 19 ], p: [ 1 ] }
            draw:
                road_text:
                    priority: 35
                    text_source: n
                    anchor: center
                    align: center
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: global.colorscheme.secondary_text_15
                        size: [[18, 10px], [19, 11px]]

        labels_highway:
            filter: { $zoom: { min: 15 }, p: 5 }
            draw:
                road_text:
                    # repeat_group: labels-highway-z12
                    priority: 31
                    text_source: n
                    anchor: center
                    align: center
                    repeat_distance: 300px
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: global.colorscheme.highway_text
                        weight: 400
                        size: [[15, 15px], [16, 15px], [17, 15px], [18, 16px], [19, 17px], [20, 17px]]
        
        labels_main:
            filter: { $zoom: { min: 14 }, p: 4 }
            draw:
                road_text:
                    # repeat_group: labels-highway-z12
                    priority: 32
                    text_source: n
                    anchor: center
                    align: center
                    repeat_distance: 150px
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: global.colorscheme.main_text
                        weight: 400
                        size: [[14, 10px], [15, 13px], [16, 13px], [17, 14px], [18, 16px], [19, 16px], [20, 19px]]

        symbol_motorway:
            filter: function () { return (feature.p == 6 && $zoom >= 7); }
            draw:
                english_text:
                    priority: 7
                    visible: true
                    text_source: r
                    anchor: center
                    align: center
                    # repeat_distance: 512px
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: white
                        size: [[7, 9px], [15, 15px]]
                        stroke: { color: green, width: [[7, 2px], [15, 3px]] }

        symbol_highway:
            filter: function () { return (feature.p == 5 && $zoom >= 8 ); }
            draw:
                english_text:
                    priority: 7
                    visible: true
                    text_source: r
                    anchor: center
                    align: center
                    # repeat_distance: 512px
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: white
                        size: [[7, 9px], [15, 15px]]
                        stroke: { color: '#3878c7', width: [[7, 2px], [15, 3px]] }

        labels_secondary_13_14:
            filter: { $zoom: [ 13, 14 ], p: [ 3 ] }
            draw:
                road_text:
                    priority: 33
                    text_source: n
                    anchor: center
                    align: center
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: global.colorscheme.secondary_text_13
                        size: [ [ 13, 10px ], [ 14, 11px ] ]
        labels_secondary_15_16:
            filter: { $zoom: [ 15, 16 ], p: [ 3 ] }
            draw:
                road_text:
                    priority: 33
                    text_source: n
                    anchor: center
                    align: center
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: global.colorscheme.secondary_text_15
                        weight: 400
                        size: [[15, 12px], [16, 12px]]
        labels_tertiary_16_17:
            filter: { $zoom: [ 16, 17 ], p: [ 2 ] }
            draw:
                road_text:
                    priority: 34
                    text_source: n
                    anchor: center
                    align: center
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: global.colorscheme.secondary_text_13
                        size: [[16, 10px], [17, 10px]]
        labels_teritiary_18_19:
            filter: { $zoom: [ 18, 19 ], p: [ 2 ] }
            draw:
                road_text:
                    priority: 34
                    text_source: n
                    anchor: center
                    align: center
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: global.colorscheme.secondary_text_15
                        size: [ [ 18, 11px ], [ 19, 11px ] ]

    scale:
        data: { source: local }
        label_provinces:
            filter: { k: 9, $zoom: [5, 6, 7] }
            draw:
                english_text:
                    interactive: true
                    priority: 2
                    anchor: top
                    text_source: d
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: global.colorscheme.provinces_fill
                        weight: 400
                        size: [[5, 13px], [6, 13px], [7, 13px]]
                        transform: uppercase
                        stroke: { color: global.colorscheme.provinces_stroke, width: 1 }

        label_provincial_capitals:
            filter: { k: 5, p: 1, $zoom:  { min: 6, max: 14 } }
            draw:
                english_text:
                    interactive: true
                    priority: 4
                    anchor: center
                    text_source: d
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: global.colorscheme.province_cap_fill
                        weight: 400
                        size: [[6, 15px], [7, 16px], [8, 18px], [9, 20px], [10, 20px], [11, 23px], [12, 23px], [13, 23px]]
                        transform: capitalize
                        stroke: { color: global.colorscheme.province_cap_stroke , width: 1 }

        label_major_cities:
            filter: { k: 5, p: 2, $zoom:  { min: 6, max: 14 }  }
            draw:
                english_text:
                    interactive: true
                    priority: 5
                    anchor: center
                    text_source: d
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: global.colorscheme.cities_fill
                        weight: 400
                        size: [[6, 14px], [7, 14px], [8, 14px], [9, 14px], [10, 15px], [11, 16px], [12, 16px], [13, 16px]]
                        transform: capitalize
                        stroke: { color: global.colorscheme.cities_stroke , width: 1 }
        label_cities:
            filter: { k: 5, p: 3 , $zoom:  { min: 7, max: 16 } }
            draw:
                english_text:
                    interactive: true
                    priority: 6
                    anchor: center
                    text_source: d
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: global.colorscheme.cities_fill
                        size: [[7, 13px], [8, 14px], [9, 15px], [10, 15px], [11, 15px], [12, 16px], [13, 16px], [14, 17px], [15, 17px]]
                        transform: capitalize
                        stroke: { color: global.colorscheme.cities_stroke , width: 1 }
        label_minor_cities:
            filter: { k: 5, p: [4,5], $zoom: {min: 8,  max: 16} }
            draw:
                english_text:
                    interactive: true
                    priority: 8
                    anchor: center
                    text_source: d
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: global.colorscheme.cities_fill
                        size: [[7, 12px], [8, 12px], [9, 12px], [10, 12px], [11, 12px], [12, 14px], [13, 14px], [14, 16px], [15, 16px]]
                        transform: capitalize
                        stroke: { color: global.colorscheme.cities_stroke , width: 1 }

        label_areas_sectors:
            filter: { k: [3], p: [1,2,3,4,5], $zoom: {min: 11,  max: 14}  }
            draw:
                english_text:
                    interactive: true
                    priority: 9
                    anchor: center
                    text_source: d
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: global.colorscheme.area_sector_fill
                        size: [[11, 11px], [12, 12px], [13, 13px]]
                        transform: capitalize
                        stroke: { color: global.colorscheme.area_sector_stroke , width: 1 }
        label_areas_subsectors:
            filter: { k: [1,2], p: [1,2,3,4,5],  $zoom: {min: 13,  max: 17} }
            draw:
                english_text:
                    interactive: true
                    priority: 10
                    anchor: center
                    text_source: d
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: global.colorscheme.area_subsector_fill
                        size: [[13, 11px], [14, 11px], [15, 12px], [16, 13px]]
                        transform: uppercase
                        stroke: { color: global.colorscheme.area_subsector_stroke , width: 1 }

    world_labels:
        data: { source: local }
        country_p_01:
            filter: { p: [0,1], $zoom: [3,4,5,6] }
            draw:
                english_text:
                    priority: 1
                    anchor: center
                    text_source: n
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: global.colorscheme.country
                        size: [[5, 16px], [6, 18px]]
                        weight: bold
                        transform: capitalize
                        stroke: { color: global.colorscheme.country_stroke , width: 1 }


        capitals:
            filter: { p: 2, $zoom: [ 5,6,7,8,9,10,11,12,13 ] }
            draw:
                english_text:
                    priority: 2
                    anchor: bottom
                    collide: false
                    text_source: n
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        fill: global.colorscheme.capitals
                        weight: 400
                        transform: capitalize
                        size: [[5, 14px],[6, 15px], [7, 16px], [8, 18px], [9, 20px], [10, 20px], [11, 23px], [12, 23px], [13, 23px]]
                        stroke: { color: global.colorscheme.capitals_stroke , width: 1 }

    cartographic:
        data: { source: local, layer: [cartographic,cartographic150,cartographic500] }
        parks:
            filter:
                any:
                    - { k: ["parks", "Park"] }
                    - { s: ["Golf Club"] }
            draw:
                polygons:
                    order: 10
                    color: global.colorscheme.park
        forests:
            filter: { k: ["forests", "Vegetation"] }
            draw:
                polygons:
                    order: function(){if (feature.s == "Forest"){return 6;} else {return 17;}}
                    color: global.colorscheme.vegetation
        religious_places:
            filter: { k: ["religious places", "Religious Place"], $zoom: {min: 16} }
            draw:
                polygons:
                    order: 15
                    color: global.colorscheme.religious
        industries:
            filter: { k: ["industry", "Industry"] }
            draw:
                polygons:
                    order: 7
                    color: global.colorscheme.industrial
        educational:
            filter: { k: ["educational", "Education"], $zoom: {min: 16} }
            draw:
                polygons:
                    order: 12
                    color: global.colorscheme.school
        hospitals:
            filter: { k: ["hospitals", "Medical"] }
            draw:
                polygons:
                    order: 14
                    color: global.colorscheme.hospital
        openarea:
            filter: function(){ return ((feature.k == "port places") || (feature.k == "Open Area" && feature.s != "Runway")) }
            draw:
                polygons:
                    order: 9
                    color: global.colorscheme.openarea
        coveredarea:
            filter:
                all:
                    - [ k: "Covered Area" , s: "Runway"]
                    - $zoom: {min: 16}
            draw:
                polygons:
                    order: 13
                    color: global.colorscheme.coveredarea
        sport:
            filter: function(){ return (feature.k == "Sports" && feature.s != "Golf Club"); }
            draw:
                polygons:
                    order: 17
                    color: global.colorscheme.sport
        water:
            filter: { k: ["water", "Waterbody"] }
            draw:
                polygons:
                    order: 19
                    color: global.colorscheme.water
        misc:
            filter: { k: ["misc", "Misc"] }
            draw:
                polygons:
                    # interactive: true
                    order: 10
                    color: global.colorscheme.misc
        commercial:
            filter: { k: ["commercial", "Commercial"], s: ["market","Market", "Shopping Mall"] }
            draw:
                polygons:
                    order: 8
                    color: global.colorscheme.commercial
    buildings:
        data: { source: local2 }
        filter: function(){return (global.buildingStatus == true) }
        buildings_day:
            data: { source: local2, layer: buildings }
            filter: function() { return (feature.material == "solid"|| feature.material == "Solid"|| feature.material == "Solid Lines" ||feature.material == "solid_lines") && (global.currentTime == 'day' && global.currentVersion == 'high') ; }
            draw:
                earth:
                    order: 30
                    style: solidbuildings_day
                    color: function () { return (feature.color); }
                    visible: true
                    extrude: true

        buildingsWindows_day:
            data: { source: local2, layer: buildings}
            filter: function() { return (feature.material == "Solid Window" || feature.material == "Solid windows"|| feature.material == "solid_windows" || feature.material == "Solid Windows")  && (global.currentTime == 'day' && global.currentVersion == 'high') ; }
            draw:
                earth:
                    order: 30
                    style: cBuildingWindows_day
                    color: function () { return (feature.color); }
                    extrude: true

        gbuildings_day:
            data: { source: local2, layer: buildings}
            filter: function() { return  (feature.material == "glass")  && (global.currentTime == 'day' && global.currentVersion == 'high') ; }
            draw:
                earth:
                    order: 30
                    style: glassBuilding_day
                    color: function () { return (feature.color); }
                    extrude: true

        buildings_night:
            data: { source: local2, layer: buildings }
            filter: function() { return (feature.material == "solid"|| feature.material == "Solid"|| feature.material == "Solid Lines" ||feature.material == "solid_lines") && (global.currentTime == 'night' && global.currentVersion == 'high') ; }
            draw:
                earth:
                    order: 30
                    style: solidbuildings_night
                    color: function () { return (feature.color); }
                    visible: true
                    extrude: true

        buildingsWindows_night:
            data: { source: local2, layer: buildings}
            filter: function() { return (feature.material == "Solid Window" || feature.material == "Solid windows"|| feature.material == "solid_windows" || feature.material == "Solid Windows")  && (global.currentTime == 'night' && global.currentVersion == 'high') ; }
            draw:
                earth:
                    order: 30
                    style: cBuildingWindows_night
                    color: function () { return (feature.color); }
                    extrude: true

        gbuildings_night:
            data: { source: local2, layer: buildings}
            filter: function() { return  (feature.material == "glass")  && (global.currentTime == 'night' && global.currentVersion == 'high') ; }
            draw:
                earth:
                    order: 30
                    style: glassBuilding_night
                    color: function () { return (feature.color); }
                    extrude: true
        buildings_day_low:
            data: { source: local2, layer: buildings }
            filter: function() { return (feature.material == "solid"|| feature.material == "Solid"|| feature.material == "Solid Lines" ||feature.material == "solid_lines" || feature.material == "Solid Window" || feature.material == "Solid windows"|| feature.material == "solid_windows" || feature.material == "Solid Windows" || feature.material == "glass") && (global.currentTime == 'day' && global.currentVersion == 'low') ; }
            draw:
                earth:
                    order: 30
                    style: solidbuildings_day
                    color: function () { return (feature.color); }
                    visible: true
                    extrude: true
        buildings_night_low:
            data: { source: local2, layer: buildings }
            filter: function() { return (feature.material == "solid"|| feature.material == "Solid"|| feature.material == "Solid Lines" ||feature.material == "solid_lines" || feature.material == "Solid Window" || feature.material == "Solid windows"|| feature.material == "solid_windows" || feature.material == "Solid Windows" || feature.material == "glass") && (global.currentTime == 'night' && global.currentVersion == 'low') ; }
            draw:
                earth:
                    order: 30
                    style: solidbuildings_night
                    color: function () { return (feature.color); }
                    visible: true
                    extrude: true

    carto_labels:
        data: { source: local }
        water:
            filter: { k: ["water", "Waterbody"] , $zoom: {min: 11}}
            draw:
                english_text:
                    priority: 15
                    anchor: center
                    align: center
                    visible: true
                    text_source: n
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        size:  [[7, 9px], [10, 10px],[14,14px],[15,16px] ]
                        fill: global.colorscheme.water_fill
                        transform: capitalize
                        stroke: { color: global.colorscheme.water_stroke , width: 1 }
        parks:
            filter: { k: ["parks", "forests", "Park", "Vegetation"] , $zoom: {min: 12}}
            draw:
                english_text:
                    priority: 15
                    anchor: center
                    align: center
                    visible: true
                    text_source: n
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        size:  [[4, 9px],[15,14px] ]
                        fill: global.colorscheme.parks_fill
                        # style: italic
                        stroke: { color: global.colorscheme.parks_stroke , width: 0.5 }

    waterways-labels:
        data: { source: local , layer: [waterways,waterways150,waterways500] }
        filter: { $zoom:  { min: 11 } , n: true }
        labels:
            filter: function() { return feature.n.slice(0, 1) != '?' }
            draw:
                english_text:
                    priority: 15
                    anchor: center
                    align: center
                    visible: true
                    repeat_distance: 1000px
                    text_source:  |
                        function() {
                            var arr = feature.n.split(" ");
                            for (var i = 0; i < arr.length; i++) {
                                arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1).toLowerCase();
                            }
                            return arr.join(" ");
                        }
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: global.font_eng
                        size:  [[7, 9px], [10, 10px],[14,14px],[15,16px] ]
                        fill: global.colorscheme.water_fill
                        stroke: { color: global.colorscheme.water_stroke , width: 1 }

    waterways:
        data: { source: local }
        waterways:
            filter: function() { return feature.n != '????' }
            draw:
                lines:
                    order: 18
                    color: global.colorscheme.water
                    width: [[12, 2px], [20, 20px]]
            rivers:
                filter: { t: [river],  $zoom: {min: 9}  }
                draw:
                    lines:
                        order: 18
                        color: global.colorscheme.water
                        width: [[10, 2px], [20, 20px]]
            streams:
                filter: { t: [stream],  $zoom: {min: 9}  }
                draw:
                    lines:
                        order: 18
                        color: global.colorscheme.water
                        width: [[12, 2px], [20, 15px]]

    railways:
        data: { source: local }
        draw:
            dashedline:
                order: 25
                color: '#BEC1C5'
                width: [[11, 0.5px], [20, 1px]]
    pois:
        data: { source: local-pois }
        filter: function(){ return global.poiStatus == true}
        poisiconsandtext:
            filter: function(){return (feature.z <= $zoom) ;}
            draw:
                icons:
                    interactive: true
                    priority: function(){return feature.z;}
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    sprite: |
                        function() {
                            if(feature.s == null)
                            {
                              return 'othergeneral';
                            }
                            else
                            {
                              var str = feature.s;
                              str = str.replace(/\s+/g,'');
                              str = str.replace(/\&+/g,'');
                              str = str.replace(/\/+/g,'');
                              str = str.replace(/\-+/g,'');
                              return str.toLowerCase();
                            }
                            }
                    size: [19.8px, 25px]
                    text:
                        interactive: true
                        transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                        text_source: |
                            function() {
                                if (feature.d && feature.d.length > 30) {
                                    return feature.d.slice(0, 30) + '…';
                                }
                                return feature.d;
                            }
                        font:
                            family: global.font_eng
                            fill: |
                                function() {
                                    if(global.currentTime == 'dark'){
                                        return global.pois_color.dark_mode;
                                    }
                                    else if(feature.s == null)
                                    {
                                        return global.pois_color.othergeneral;
                                    }
                                    else
                                    {
                                        var str = feature.s;
                                        str = str.replace(/\s+/g,'');
                                        str = str.replace(/\&+/g,'');
                                        str = str.replace(/\/+/g,'');
                                        str = str.replace(/\-+/g,'');
                                        str=  str.toLowerCase();
                                        if (str=='accounting'){return global.pois_color.accounting;}
                                        else if (str=='advertisingagency'){return global.pois_color.advertisingagency;}
                                        else if (str=='agribusiness'){return global.pois_color.agribusiness;}
                                        else if (str=='airport'){return global.pois_color.airport;}
                                        else if (str=='ambulance'){return global.pois_color.ambulance;}
                                        else if (str=='amusementpark'){return global.pois_color.amusementpark;}
                                        else if (str=='aquarium'){return global.pois_color.aquarium;}
                                        else if (str=='artgallery'){return global.pois_color.artgallery;}
                                        else if (str=='atm'){return global.pois_color.atm;}
                                        else if (str=='auditorium'){return global.pois_color.auditorium;}
                                        else if (str=='autospareparts'){return global.pois_color.autospareparts;}
                                        else if (str=='bank'){return global.pois_color.bank;}
                                        else if (str=='barber'){return global.pois_color.barber;}
                                        else if (str=='basketballcourt'){return global.pois_color.basketballcourt;}
                                        else if (str=='beautysalon'){return global.pois_color.beautysalon;}
                                        else if (str=='bookstore'){return global.pois_color.bookstore;}
                                        else if (str=='booksandstationers'){return global.pois_color.booksandstationers;}
                                        else if (str=='busstation'){return global.pois_color.busstation;}
                                        else if (str=='busstop'){return global.pois_color.busstop;}
                                        else if (str=='cafe'){return global.pois_color.cafe;}
                                        else if (str=='campground'){return global.pois_color.campground;}
                                        else if (str=='canteen'){return global.pois_color.canteen;}
                                        else if (str=='carrepair'){return global.pois_color.carrepair;}
                                        else if (str=='carshowroom'){return global.pois_color.carshowroom;}
                                        else if (str=='carwash'){return global.pois_color.carwash;}
                                        else if (str=='catererseventplanners'){return global.pois_color.catererseventplanners;}
                                        else if (str=='cemetery'){return global.pois_color.cemetery;}
                                        else if (str=='church'){return global.pois_color.church;}
                                        else if (str=='cinema'){return global.pois_color.cinema;}
                                        else if (str=='cleaningandlaundry'){return global.pois_color.cleaningandlaundry;}
                                        else if (str=='clothingstore'){return global.pois_color.clothingstore;}
                                        else if (str=='college'){return global.pois_color.college;}
                                        else if (str=='communitycenter'){return global.pois_color.communitycenter;}
                                        else if (str=='computerstore'){return global.pois_color.computerstore;}
                                        else if (str=='constructionservices'){return global.pois_color.constructionservices;}
                                        else if (str=='conveniencestore'){return global.pois_color.conveniencestore;}
                                        else if (str=='cosmeticsstore'){return global.pois_color.cosmeticsstore;}
                                        else if (str=='courierservice'){return global.pois_color.courierservice;}
                                        else if (str=='court'){return global.pois_color.court;}
                                        else if (str=='cricketground'){return global.pois_color.cricketground;}
                                        else if (str=='currencyexchange'){return global.pois_color.currencyexchange;}
                                        else if (str=='dairyshop'){return global.pois_color.dairyshop;}
                                        else if (str=='dentist'){return global.pois_color.dentist;}
                                        else if (str=='dhaba'){return global.pois_color.dhaba;}
                                        else if (str=='drivingschool'){return global.pois_color.drivingschool;}
                                        else if (str=='dryport'){return global.pois_color.dryport;}
                                        else if (str=='electricalstore'){return global.pois_color.electricalstore;}
                                        else if (str=='electrician'){return global.pois_color.electrician;}
                                        else if (str=='electricityoffice'){return global.pois_color.electricityoffice;}
                                        else if (str=='electronicsstore'){return global.pois_color.electronicsstore;}
                                        else if (str=='embassy'){return global.pois_color.embassy;}
                                        else if (str=='equipment'){return global.pois_color.equipment;}
                                        else if (str=='exhibitionhall'){return global.pois_color.exhibitionhall;}
                                        else if (str=='factory'){return global.pois_color.factory;}
                                        else if (str=='fastfood'){return global.pois_color.fastfood;}
                                        else if (str=='filterationplant'){return global.pois_color.filterationplant;}
                                        else if (str=='firestation'){return global.pois_color.firestation;}
                                        else if (str=='fitnesscenter'){return global.pois_color.fitnesscenter;}
                                        else if (str=='florist'){return global.pois_color.florist;}
                                        else if (str=='flyingclub'){return global.pois_color.flyingclub;}
                                        else if (str=='footballground'){return global.pois_color.footballground;}
                                        else if (str=='fruitandvegetable'){return global.pois_color.fruitandvegetable;}
                                        else if (str=='fuelstation'){return global.pois_color.fuelstation;}
                                        else if (str=='functionhall'){return global.pois_color.functionhall;}
                                        else if (str=='furniturestore'){return global.pois_color.furniturestore;}
                                        else if (str=='giftstore'){return global.pois_color.giftstore;}
                                        else if (str=='glasswork'){return global.pois_color.glasswork;}
                                        else if (str=='governmentbuilding'){return global.pois_color.governmentbuilding;}
                                        else if (str=='guesthouse'){return global.pois_color.guesthouse;}
                                        else if (str=='gurdwara'){return global.pois_color.gurdwara;}
                                        else if (str=='hardwareandsanitary'){return global.pois_color.hardwareandsanitary;}
                                        else if (str=='herbalclinic'){return global.pois_color.herbalclinic;}
                                        else if (str=='hijamacenter'){return global.pois_color.hijamacenter;}
                                        else if (str=='hikmat'){return global.pois_color.hikmat;}
                                        else if (str=='historicalplace'){return global.pois_color.historicalplace;}
                                        else if (str=='hockeyground'){return global.pois_color.hockeyground;}
                                        else if (str=='homegoodsstore'){return global.pois_color.homegoodsstore;}
                                        else if (str=='homeopathicclinic'){return global.pois_color.homeopathicclinic;}
                                        else if (str=='hospital'){return global.pois_color.hospital;}
                                        else if (str=='hostel'){return global.pois_color.hostel;}
                                        else if (str=='hotel'){return global.pois_color.hotel;}
                                        else if (str=='icecreamparlor'){return global.pois_color.icecreamparlor;}
                                        else if (str=='imambargah'){return global.pois_color.imambargah;}
                                        else if (str=='indoorgames'){return global.pois_color.indoorgames;}
                                        else if (str=='insuranceagency'){return global.pois_color.insuranceagency;}
                                        else if (str=='intersection'){return global.pois_color.intersection;}
                                        else if (str=='jazz'){return global.pois_color.jazz;}
                                        else if (str=='jewellerystore'){return global.pois_color.jewellerystore;}
                                        else if (str=='juicebar'){return global.pois_color.juicebar;}
                                        else if (str=='khokha'){return global.pois_color.khokha;}
                                        else if (str=='laboratory'){return global.pois_color.laboratory;}
                                        else if (str=='langar'){return global.pois_color.langar;}
                                        else if (str=='lawenforcement'){return global.pois_color.lawenforcement;}
                                        else if (str=='lawyer'){return global.pois_color.lawyer;}
                                        else if (str=='library'){return global.pois_color.library;}
                                        else if (str=='localadministration'){return global.pois_color.localadministration;}
                                        else if (str=='lpgsupplier'){return global.pois_color.lpgsupplier;}
                                        else if (str=='madrassa'){return global.pois_color.madrassa;}
                                        else if (str=='materialsupplier'){return global.pois_color.materialsupplier;}
                                        else if (str=='meatstore'){return global.pois_color.meatstore;}
                                        else if (str=='medicalclinic'){return global.pois_color.medicalclinic;}
                                        else if (str=='metalwork'){return global.pois_color.metalwork;}
                                        else if (str=='mill'){return global.pois_color.mill;}
                                        else if (str=='mobileshop'){return global.pois_color.mobileshop;}
                                        else if (str=='moneytransfer'){return global.pois_color.moneytransfer;}
                                        else if (str=='monument'){return global.pois_color.monument;}
                                        else if (str=='mosque'){return global.pois_color.mosque;}
                                        else if (str=='motel'){return global.pois_color.motel;}
                                        else if (str=='motorbikerepair'){return global.pois_color.motorbikerepair;}
                                        else if (str=='motorbikeshowroom'){return global.pois_color.motorbikeshowroom;}
                                        else if (str=='museum'){return global.pois_color.museum;}
                                        else if (str=='newspaper'){return global.pois_color.newspaper;}
                                        else if (str=='ngo'){return global.pois_color.ngo;}
                                        else if (str=='oiltraders'){return global.pois_color.oiltraders;}
                                        else if (str=='optician'){return global.pois_color.optician;}
                                        else if (str=='orphanage'){return global.pois_color.orphanage;}
                                        else if (str=='otherbeautyandspa'){return global.pois_color.otherbeautyandspa;}
                                        else if (str=='othercivicutilities'){return global.pois_color.othercivicutilities;}
                                        else if (str=='otherconstruction'){return global.pois_color.otherconstruction;}
                                        else if (str=='othereducation'){return global.pois_color.othereducation;}
                                        else if (str=='otherevents'){return global.pois_color.otherevents;}
                                        else if (str=='otherfinance'){return global.pois_color.otherfinance;}
                                        else if (str=='otherfood'){return global.pois_color.otherfood;}
                                        else if (str=='othergeneral'){return global.pois_color.othergeneral;}
                                        else if (str=='othergovernment'){return global.pois_color.othergovernment;}
                                        else if (str=='othergrocery'){return global.pois_color.othergrocery;}
                                        else if (str=='otherindustry'){return global.pois_color.otherindustry;}
                                        else if (str=='otherlocalbusinesses'){return global.pois_color.otherlocalbusinesses;}
                                        else if (str=='otherlodging'){return global.pois_color.otherlodging;}
                                        else if (str=='othermedia'){return global.pois_color.othermedia;}
                                        else if (str=='othermedical'){return global.pois_color.othermedical;}
                                        else if (str=='otherrecreation'){return global.pois_color.otherrecreation;}
                                        else if (str=='otherreligion'){return global.pois_color.otherreligion;}
                                        else if (str=='othershopping'){return global.pois_color.othershopping;}
                                        else if (str=='othersocialservice'){return global.pois_color.othersocialservice;}
                                        else if (str=='othersports'){return global.pois_color.othersports;}
                                        else if (str=='othertourist'){return global.pois_color.othertourist;}
                                        else if (str=='othertransportation'){return global.pois_color.othertransportation;}
                                        else if (str=='othervehicle'){return global.pois_color.othervehicle;}
                                        else if (str=='park'){return global.pois_color.park;}
                                        else if (str=='parking'){return global.pois_color.parking;}
                                        else if (str=='petstore'){return global.pois_color.petstore;}
                                        else if (str=='pharmacy'){return global.pois_color.pharmacy;}
                                        else if (str=='photostudio'){return global.pois_color.photostudio;}
                                        else if (str=='plumber'){return global.pois_color.plumber;}
                                        else if (str=='postoffice'){return global.pois_color.postoffice;}
                                        else if (str=='powerstation'){return global.pois_color.powerstation;}
                                        else if (str=='pressclub'){return global.pois_color.pressclub;}
                                        else if (str=='printing'){return global.pois_color.printing;}
                                        else if (str=='privatecompany'){return global.pois_color.privatecompany;}
                                        else if (str=='radiostation'){return global.pois_color.radiostation;}
                                        else if (str=='railwaystation'){return global.pois_color.railwaystation;}
                                        else if (str=='realestateagency'){return global.pois_color.realestateagency;}
                                        else if (str=='recyclestore'){return global.pois_color.recyclestore;}
                                        else if (str=='refinery'){return global.pois_color.refinery;}
                                        else if (str=='rentacar'){return global.pois_color.rentacar;}
                                        else if (str=='rescueservice'){return global.pois_color.rescueservice;}
                                        else if (str=='restaurant'){return global.pois_color.restaurant;}
                                        else if (str=='school'){return global.pois_color.school;}
                                        else if (str=='seaport'){return global.pois_color.seaport;}
                                        else if (str=='shoestore'){return global.pois_color.shoestore;}
                                        else if (str=='shoppingmall'){return global.pois_color.shoppingmall;}
                                        else if (str=='shrine'){return global.pois_color.shrine;}
                                        else if (str=='spa'){return global.pois_color.spa;}
                                        else if (str=='sportsgoods'){return global.pois_color.sportsgoods;}
                                        else if (str=='squashcourt'){return global.pois_color.squashcourt;}
                                        else if (str=='stadium'){return global.pois_color.stadium;}
                                        else if (str=='stockbroker'){return global.pois_color.stockbroker;}
                                        else if (str=='suigasoffice'){return global.pois_color.suigasoffice;}
                                        else if (str=='supermarket'){return global.pois_color.supermarket;}
                                        else if (str=='sweetsandbakers'){return global.pois_color.sweetsandbakers;}
                                        else if (str=='swimmingpool'){return global.pois_color.swimmingpool;}
                                        else if (str=='tailor'){return global.pois_color.tailor;}
                                        else if (str=='tandoor'){return global.pois_color.tandoor;}
                                        else if (str=='taxistand'){return global.pois_color.taxistand;}
                                        else if (str=='technicalservices'){return global.pois_color.technicalservices;}
                                        else if (str=='telecommunication'){return global.pois_color.telecommunication;}
                                        else if (str=='telenor'){return global.pois_color.telenor;}
                                        else if (str=='temple'){return global.pois_color.temple;}
                                        else if (str=='tenniscourt'){return global.pois_color.tenniscourt;}
                                        else if (str=='tomb'){return global.pois_color.tomb;}
                                        else if (str=='toystore'){return global.pois_color.toystore;}
                                        else if (str=='tplcorp'){return global.pois_color.tplcorp;}
                                        else if (str=='tplinsurance'){return global.pois_color.tplinsurance;}
                                        else if (str=='tpllifeinsurance'){return global.pois_color.tpllifeinsurance;}
                                        else if (str=='tplmaps'){return global.pois_color.tplmaps;}
                                        else if (str=='tplproperties'){return global.pois_color.tplproperties;}
                                        else if (str=='tpltrakker'){return global.pois_color.tpltrakker;}
                                        else if (str=='traininginstitute'){return global.pois_color.traininginstitute;}
                                        else if (str=='travelagency'){return global.pois_color.travelagency;}
                                        else if (str=='tuitioncenter'){return global.pois_color.tuitioncenter;}
                                        else if (str=='tvchannel'){return global.pois_color.tvchannel;}
                                        else if (str=='tvstudio'){return global.pois_color.tvstudio;}
                                        else if (str=='tyreshop'){return global.pois_color.tyreshop;}
                                        else if (str=='university'){return global.pois_color.university;}
                                        else if (str=='veterinarycare'){return global.pois_color.veterinarycare;}
                                        else if (str=='vocationalcenter'){return global.pois_color.vocationalcenter;}
                                        else if (str=='volleyballcourt'){return global.pois_color.volleyballcourt;}
                                        else if (str=='warehouse'){return global.pois_color.warehouse;}
                                        else if (str=='wholesale'){return global.pois_color.wholesale;}
                                        else if (str=='woodwork'){return global.pois_color.woodwork;}
                                        else if (str=='zoo'){return global.pois_color.zoo;}
                                        else {return global.pois_color.othergeneral;}
                                    }
                                }
                            size: 12px
                            stroke: { color: global.colorscheme.poi_stroke , width: 0.5 }

    search-pois:
        data: { source: search-pois }
        filter: function(){ return global.poiStatus == true}
        pinmarker:
            filter: { type: pinmarker }
            draw:
                pinmarker:
                    priority: 9.9
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    sprite: SPRITE
                    size: [[12, 44px], [15, 44px]]
                    interactive: true

        search_object:
            draw:
                search_icons:
                    interactive: true
                    priority: 11
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    sprite: |
                        function() {
                            if(feature.s == null)
                            {
                              return 'search_othergeneral';
                            }
                            else
                            {
                              var str = feature.sub_cat;
                              if (str.search("-se") != -1) {
                                  str = "search_" + str;
                                  var pos = str.search("-se");
                                  str = str.substring(0,pos);
                              }
                              str = str.replace(/\s+/g,'');
                              str = str.replace(/\&+/g,'');
                              str = str.replace(/\/+/g,'');
                              str = str.replace(/\-+/g,'');
                              return str.toLowerCase();
                            }

                            }
                    size: [31.6px, 40px]
                    text:
                        transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                        text_source: |
                                function() {
                                    if (feature.display_na && feature.display_na.length > 30) {
                                        return feature.display_na.slice(0, 30) + '…';
                                    }
                                    return feature.display_na;
                                }
                        font:
                            family: global.font_eng
                            fill: global.colorscheme.poi_fill
                            size: 15px
                            stroke: { color: global.colorscheme.search_poi_stroke , width: 1.5 }
