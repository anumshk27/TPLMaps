global:
    default_order: function() { return feature.sort_key || 0; }

    currentTime: 'day'
    currentVersion: 'high'
    buildingStatus: false
    poiStatus: true
    sdk_api_key : tmp
    trafficStatus: false


    colorscheme: 
        #roads
        motorway: function(){if(global.currentTime == 'day'){return '#fff7e1'; }else if(global.currentTime == 'night'){return '#695e4d'; }}
        motorway_outline: function(){if(global.currentTime == 'day'){return '#ffd983'; }else if(global.currentTime == 'night'){return '#202934'; }}
        highway: function(){if(global.currentTime == 'day'){return '#fff7e1'; }else if(global.currentTime == 'night'){return '#695e4d'; }}
        highway_outline: function(){if(global.currentTime == 'day'){return '#ffd983'; }else if(global.currentTime == 'night'){return '#202934'; }}
        main_roads: function(){if(global.currentTime == 'day'){return '#fff7e1'; }else if(global.currentTime == 'night'){return '#7f725d'; }}
        main_roads_outline: function(){if(global.currentTime == 'day'){return '#ffd983'; }else if(global.currentTime == 'night'){return '#232c39'; }}
        secondary_roads: function(){if(global.currentTime == 'day'){return '#ffffff'; }else if(global.currentTime == 'night'){return '#38414e'; }}
        secondary_roads_outline: function(){if(global.currentTime == 'day'){return '#cfd2d7'; }else if(global.currentTime == 'night'){return '#232c39'; }}
        tertiary_roads: function(){if(global.currentTime == 'day'){return '#ffffff'; }else if(global.currentTime == 'night'){return '#38414e'; }}
        tertiary_roads_outline: function(){if(global.currentTime == 'day'){return '#cfd2d7'; }else if(global.currentTime == 'night'){return '#232c39'; }}
        streets: function(){if(global.currentTime == 'day'){return '#edeae6'; }else if(global.currentTime == 'night'){return '#38414e'; }}
        streetview: function(){if(global.currentTime == 'day'){return '#009e83'; }else if(global.currentTime == 'night'){return '#e25936'; }}
        selected_route: function(){if(global.currentTime == 'day'){return '#7ab899'; }else if(global.currentTime == 'night'){return '#7ab899'; }}
        selected_route_outline: function(){if(global.currentTime == 'day'){return '#782bca'; }else if(global.currentTime == 'night'){return '#782bca'; }}
        segment: function(){if(global.currentTime == 'day'){return '#136734'; }else if(global.currentTime == 'night'){return '#136734'; }}
        segment_outline: function(){if(global.currentTime == 'day'){return '#67cc33'; }else if(global.currentTime == 'night'){return '#59a65d'; }}
        nonselected_route: function(){if(global.currentTime == 'day'){return '#d1c7c7'; }else if(global.currentTime == 'night'){return '#A9A9A9'; }}
        nonselected_route_outline: function(){if(global.currentTime == 'day'){return '#8c8c8c'; }else if(global.currentTime == 'night'){return '#8c8c8c'; }}

        #landuse
        religious: function(){if(global.currentTime == 'day'){return '#e6eaeb'; }else if(global.currentTime == 'night'){return '#242f3e'; }}
        sport: function(){if(global.currentTime == 'day'){return '#EEDFC8'; }else if(global.currentTime == 'night'){return '#242f3e'; }}
        coveredarea: function(){if(global.currentTime == 'day'){return '#e6eaeb'; }else if(global.currentTime == 'night'){return '#242f3e'; }}
        water: function(){if(global.currentTime == 'day'){return '#91B8F8'; }else if(global.currentTime == 'night'){return '#17263c'; }}
        park: function(){if(global.currentTime == 'day'){return '#b3debf'; }else if(global.currentTime == 'night'){return '#263c3f'; }}
        vegetation: function(){if(global.currentTime == 'day'){return '#b3debf'; }else if(global.currentTime == 'night'){return '#263c3f'; }}
        commercial: function(){if(global.currentTime == 'day'){return '#fff6dc'; }else if(global.currentTime == 'night'){return '#242f3e'; }}
        hospital: function(){if(global.currentTime == 'day'){return '#fad8d4'; }else if(global.currentTime == 'night'){return '#9d6561'; }}
        school: function(){if(global.currentTime == 'day'){return '#e6eaeb'; }else if(global.currentTime == 'night'){return '#242f3e'; }}
        industrial: function(){if(global.currentTime == 'day'){return '#f8f9fa'; }else if(global.currentTime == 'night'){return '#242f3e'; }}
        misc: function(){if(global.currentTime == 'day'){return '#faf8f2'; }else if(global.currentTime == 'night'){return '#242f3e'; }}
        openarea: function(){if(global.currentTime == 'day'){return '#f8f9fa'; }else if(global.currentTime == 'night'){return '#2f3948'; }}

        #others
        citiesfill8_day: '#f8f9fa'
        citiesfill15_day: '#f8f9fa'

        world: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'night'){return '#242f3e'; }}
        continent_a: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'night'){return '#242f3e'; }}
        continent_p: function(){if(global.currentTime == 'day'){return '#fbf8f3'; }else if(global.currentTime == 'night'){return '#242f3e'; }}
        continent_b: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'night'){return '#242f3e'; }}
        continent_c: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'night'){return '#242f3e'; }}
        continent_i: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'night'){return '#242f3e'; }}
        continent_t: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'night'){return '#242f3e'; }}
        continent_r: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'night'){return '#242f3e'; }}
        continent_u: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'night'){return '#242f3e'; }}
        continent_s: function(){if(global.currentTime == 'day'){return '#f5f0e4'; }else if(global.currentTime == 'night'){return '#242f3e'; }}
        
        borders_3: function(){if(global.currentTime == 'day'){return '#a09c9a'; }else if(global.currentTime == 'night'){return '#2b384b'; }}
        borders_2: function(){if(global.currentTime == 'day'){return '#E6F3D8'; }else if(global.currentTime == 'night'){return '#16476a'; }}
        borders_1: function(){if(global.currentTime == 'day'){return '#FFECE5'; }else if(global.currentTime == 'night'){return '#2b384b'; }}
        province: function(){if(global.currentTime == 'day'){return '#808080'; }else if(global.currentTime == 'night'){return '#16476a'; }}
        #labels

        capitals: function(){if(global.currentTime == 'day'){return '#000000'; }else if(global.currentTime == 'night'){return '#c88e60'; }}
        capitals_stroke: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'night'){return '#3a332f'; }}
        country: function(){if(global.currentTime == 'day'){return '#000000'; }else if(global.currentTime == 'night'){return '#726654'; }}
        country_stroke: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'night'){return '#0c2a41'; }}
        provinces_fill: function(){if(global.currentTime == 'day'){return '#4e5256'; }else if(global.currentTime == 'night'){return '#726654'; }}
        provinces_stroke: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'night'){return '#0c2a41'; }}
        province_cap_fill: function(){if(global.currentTime == 'day'){return '#000000'; }else if(global.currentTime == 'night'){return '#d39463'; }}
        province_cap_stroke: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'night'){return '#000000'; }}

        cities_fill: function(){if(global.currentTime == 'day'){return '#49311c'; }else if(global.currentTime == 'night'){return '#c88e60'; }}
        cities_stroke: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'night'){return '#000000'; }}
        area_sector_fill: function(){if(global.currentTime == 'day'){return '#717273'; }else if(global.currentTime == 'night'){return '#726654'; }}
        area_sector_stroke: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'night'){return '#0c2a41'; }}

        road_text: function(){if(global.currentTime == 'day'){return '#4e5256'; }else if(global.currentTime == 'night'){return '#9ca5b3'; }}
        road_text_stroke: function(){if(global.currentTime == 'day'){return '#d5d6d6'; }else if(global.currentTime == 'night'){return '#4e5868'; }}
        highway_text: function(){if(global.currentTime == 'day'){return '#7a3e06'; }else if(global.currentTime == 'night'){return '#f3d19c'; }}
        highway_text_border: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'night'){return '#333b45'; }}

        poi_fill: function(){if(global.currentTime == 'day'){return '#636363'; }else if(global.currentTime == 'night'){return '#87d1f5'; }}
        poi_stroke: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'night'){return '#17263d'; }}
        search_poi_stroke: function(){if(global.currentTime == 'day'){return '#FFFFFF'; }else if(global.currentTime == 'night'){return '#282d35'; }}

        water_fill: function(){if(global.currentTime == 'day'){return '#3470c9'; }else if(global.currentTime == 'night'){return '#525c6c'; }}
        water_stroke: function(){if(global.currentTime == 'day'){return '#5488d8'; }else if(global.currentTime == 'night'){return '#2a3546'; }}

        parks_fill: function(){if(global.currentTime == 'day'){return '#188038'; }else if(global.currentTime == 'night'){return '#659071'; }}
        parks_stroke: function(){if(global.currentTime == 'day'){return '#e6f4ea'; }else if(global.currentTime == 'night'){return '#324449'; }}
        endflag: function(){if(global.currentTime == 'day'){return '#404040'; }else if(global.currentTime == 'night'){return '#FFFFFF'; }}

    pois_color:
        dark_mode: '#87d1f5'

        accounting: '#ab47bc'
        advertisingagency: '#7b6242'
        agribusiness: '#ab47bc'
        airport: '#ec407a'
        ambulance: '#29b6f6'
        amusementpark: '#26c6da'
        aquarium: '#26c6da'
        artgallery: '#26c6da'
        atm: '#5c6bc0'
        auditorium: '#26c6da'
        autospareparts: '#8d6e63'
        bank: '#5c6bc0'
        barber: '#ff7043'
        basketballcourt: '#4527a0'
        beautysalon: '#ff7043'
        bookstore: '#c62828'
        booksandstationers: '#ab47bc'

        busstation: '#ec407a'
        busstop: '#ec407a'
        cafe: '#7e57c2'
        campground: '#26c6da'
        canteen: '#7e57c2'
        carrepair: '#8d6e63'
        carshowroom: '#8d6e63'
        carwash: '#8d6e63'
        catererseventplanners: '#ab47bc'
        cemetery: '#4527a0'
        church: '#ffca28'
        cinema: '#26c6da'
        cleaningandlaundry: '#ab47bc'
        clothingstore: '#c62828'
        college: '#42a5f5'
        communitycenter: '#29b6f6'

        computerstore: '#c62828'
        constructionservices: '#afb42b'
        conveniencestore: '#c62961'
        cosmeticsstore: '#c62828'
        courierservice: '#424242'
        court: '#26a69a'
        cricketground: '#4527a0'
        currencyexchange: '#9ccc65'
        dairyshop: '#c62961'
        dentist: '#ef5350'
        dhaba: '#7e57c2'
        drivingschool: '#ab47bc'
        dryport: '#ec407a'
        electricalstore: '#c62828'
        electrician: '#ab47bc'
        electricityoffice: '#26a69a'
        electronicsstore: '#c62828'

        embassy: '#78909c'
        equipment: '#afb42b'
        exhibitionhall: '#6a1b9a'
        factory: '#ffa81e'
        fastfood: '#7e57c2'
        filterationplant: '#26a69a'
        firestation: '#26a69a'
        fitnesscenter: '#4527a0'
        florist: '#ab47bc'
        flyingclub: '#26c6da'
        footballground: '#4527a0'
        fruitandvegetable: '#c62961'
        fuelstation: '#8d6e63'
        functionhall: '#6a1b9a'
        furniturestore: '#c62828'
        giftstore: '#c62828'
        glasswork: '#afb42b'

        governmentbuilding: '#78909c'
        guesthouse: '#ad1457'
        gurdwara: '#ffca28'
        hardwareandsanitary: '#afb42b'
        herbalclinic: '#ef5350'
        hijamacenter: '#ef5350'
        hikmat: '#ef5350'
        historicalplace: '#66bb6a'
        hockeyground: '#4527a0'
        homegoodsstore: '#c62828'
        homeopathicclinic: '#ef5350'
        hospital: '#ef5350'
        hostel: '#ad1457'
        hotel: '#ad1457'
        icecreamparlor: '#7e57c2'
        imambargah: '#66bb6a'
        indoorgames: '#26c6da'

        insuranceagency: '#ab47bc'
        intersection: '#4527a0'
        jazz: '#fcc718'
        jewellerystore: '#c62828'
        juicebar: '#7e57c2'
        khokha: '#c62828'
        laboratory: '#ef5350'
        langar: '#29b6f6'
        lawenforcement: '#26a69a'
        lawyer: '#ab47bc'
        library: '#29b6f6'
        localadministration: '#26a69a'
        lpgsupplier: '#ab47bc'
        madrassa: '#29b6f6'
        materialsupplier: '#afb42b'
        meatstore: '#c62961'
        medicalclinic: '#ef5350'

        metalwork: '#afb42b'
        mill: '#ffca28'
        mobileshop: '#ab47bc'
        moneytransfer: '#9ccc65'
        monument: '#66bb6a'
        mosque: '#ffca28'
        motel: '#ad1457'
        motorbikerepair: '#8d6e63'
        motorbikeshowroom: '#8d6e63'
        museum: '#66bb6a'
        newspaper: '#7b6242'
        ngo: '#29b6f6'
        oiltraders: '#ab47bc'
        optician: '#ab47bc'
        orphanage: '#29b6f6'
        otherbeautyandspa: '#ff7043'
        othercivicutilities: '#26a69a'

        otherconstruction: '#afb42b'
        othereducation: '#29b6f6'
        otherevents: '#6a1b9a'
        otherfinance: '#66bb6a'
        otherfood: '#ab47bc'
        othergeneral: '#4527a0'
        othergovernment: '#78909c'
        othergrocery: '#c62961'
        otherindustry: '#ffa81e'
        otherlocalbusinesses: '#ab47bc'
        otherlodging: '#ad1457'
        othermedia: '#7b6242'
        othermedical: '#ef5350'
        otherrecreation: '#26c6da'
        otherreligion: '#ffca28'
        othershopping: '#c62828'
        othersocialservice: '#29b6f6'

        othersports: '#4527a0'
        othertourist: '#66bb6a'
        othertransportation: '#ec407a'
        othervehicle: '#8d6e63'
        park: '#26c6da'
        parking: '#8d6e63'
        petstore: '#ab47bc'
        pharmacy: '#ef5350'
        photostudio: '#ab47bc'
        plumber: '#ab47bc'
        postoffice: '#424242'
        powerstation: '#ffa81e'
        pressclub: '#7b6242'
        printing: '#4527a0'
        privatecompany: '#ab47bc'
        radiostation: '#7b6242'
        railwaystation: '#ec407a'

        realestateagency: '#ab47bc'
        recyclestore: '#4527a0'
        refinery: '#ffa81e'
        rentacar: '#8d6e63'
        rescueservice: '#26a69a'
        restaurant: '#7e57c2'
        school: '#29b6f6'
        seaport: '#ec407a'
        shoestore: '#c62828'
        shoppingmall: '#c62828'
        shrine: '#ffca28'
        spa: '#ff7043'
        sportsgoods: '#c62828'
        squashcourt: '#4527a0'
        stadium: '#4527a0'
        stockbroker: '#9ccc65'
        suigasoffice: '#26a69a'

        supermarket: '#c62961'
        sweetsandbakers: '#7e57c2'
        swimmingpool: '#4527a0'
        tailor: '#ab47bc'
        tandoor: '#7e57c2'
        taxistand: '#ec407a'
        technicalservices: '#ab47bc'
        telecommunication: '#26a69a'
        telenor: '#00a8e4'
        temple: '#ffca28'
        tenniscourt: '#4527a0'
        tomb: '#66bb6a'
        toystore: '#c62828'
        tplcorp: '#1e4079'
        tplinsurance: '#f47920'
        tpllifeinsurance: '#79c685'
        tplmaps: '#156735'
        tplproperties: '#47257a'
        tpltrakker: '#a72c32'
        traininginstitute: '#29b6f6'
        travelagency: '#ab47bc'
        tuitioncenter: '#29b6f6'

        tvchannel: '#7b6242'
        tvstudio: '#7b6242'
        tyreshop: '#8d6e63'
        university: '#29b6f6'
        veterinarycare: '#ef5350'
        vocationalcenter: '#29b6f6'
        volleyballcourt: '#4527a0'
        warehouse: '#ffa81e'
        wholesale: '#c62828'
        woodwork: '#afb42b'
        zoo: '#26c6da'

cameras:
    perspective:
        position: [69.9551, 30.3753, 4.50]
        type: perspective
        focal_length: [[10,6.5],[13,5.5], [14, 4.5],[15,4.],[16, 2.5], [17, 2.2], [18, 2.], [19, 1.25]] # pairs of [zoom, focal len]
        vanishing_point: [0, 0] # relative to center of screen, in pixels
        active: true

lights:
    directional1:
        type: directional
        origin: world
        direction: [1.7, 1.9, -3.]
        ambient: [0.585,0.585,0.59]
        diffuse: 0.55

scene:
    background:
        color: '#fbf8f3'

cinnabar-colors:
    cameras:
        - &camera_settings            { type: isometric, axis: [0, .1], vanishing_point: [0, -500] }

# Define the textures that will be used in the redering
# For the POIs icons we will give the textures for each type of the POI
# The name, followed by the URL, and then define the sprite (for now the whole png is being used as a sprite
# so we are using 0 as both x and y origin, and the icon itself in 18x18 pixels)
# a different texture object for each icon as the icons are kept in a seperate png file

textures:
    pois:
        url: TPLBaseMapResources.bundle/map_cat_icons/map_cat_icons.png
        sprites:
            accounting: [149,1,72,72]
            advertisingagency: [223,1,72,72]
            agribusiness: [297,1,72,72]
            airport: [371,1,72,72]
            ambulance: [445,1,72,72]
            amusementpark: [519,1,72,72]
            aquarium: [593,1,72,72]
            artgallery: [667,1,72,72]
            atm: [741,1,72,72]
            auditorium: [815,1,72,72]
            autospareparts: [889,1,72,72]
            bank: [963,1,72,72]
            barber: [1,74,72,72]
            basketballcourt: [75,74,72,72]
            beautysalon: [149,75,72,72]
            bookstore: [741,963,80,80]
            booksandstationers: [223,75,71,72]
            busstation: [296,75,71,72]
            busstop: [369,75,72,72]
            cafe: [443,75,72,72]
            campground: [517,75,72,72]
            canteen: [591,75,72,72]
            carrepair: [665,75,72,72]
            carshowroom: [739,75,72,72]
            carwash: [813,75,72,72]
            catererseventplanners: [887,75,72,72]
            cemetery: [961,75,72,72]
            church: [1,148,72,72]
            cinema: [75,148,72,72]
            cleaningandlaundry: [149,149,72,72]
            clothingstore: [223,149,72,72]
            college: [297,149,72,72]
            communitycenter: [371,149,72,72]
            computerstore: [445,149,72,72]
            constructionservices: [519,149,72,72]
            conveniencestore: [593,149,72,72]
            cosmeticsstore: [667,149,72,72]
            courierservice: [741,149,72,72]
            court: [815,149,72,72]
            cricketground: [889,149,72,72]
            currencyexchange: [963,149,72,72]
            dairyshop: [1,222,72,72]
            dentist: [75,222,72,72]
            dhaba: [149,223,72,72]
            drivingschool: [223,223,72,72]
            dryport: [297,223,72,72]
            electricalstore: [371,223,72,72]
            electrician: [445,223,72,72]
            electricityoffice: [519,223,72,72]
            electronicsstore: [593,223,72,72]
            embassy: [667,223,72,72]
            equipment: [741,223,72,72]
            exhibitionhall: [815,223,72,72]
            factory: [889,223,72,72]
            fastfood: [963,223,72,72]
            filterationplant: [1,296,72,72]
            firestation: [75,296,72,72]
            fitnesscenter: [149,297,72,72]
            florist: [223,297,72,72]
            flyingclub: [297,297,72,72]
            footballground: [371,297,72,72]
            fruitandvegetable: [445,297,72,72]
            fuelstation: [519,297,72,72]
            functionhall: [593,297,72,72]
            furniturestore: [1,1,72,71]
            giftstore: [667,297,72,72]
            glasswork: [741,297,72,72]
            governmentbuildings: [815,297,72,72]
            guesthouse: [889,297,72,72]
            gurdwara: [963,297,72,72]
            hardwareandsanitary: [1,370,72,72]
            herbalclinic: [75,370,72,72]
            hijamacenter: [149,371,72,72]
            hikmat: [223,371,72,72]
            historicalplace: [297,371,71,72]
            hockeyground: [370,371,72,72]
            homegoodsstore: [444,371,72,72]
            homeopathicclinic: [518,371,72,72]
            hospital: [592,371,72,72]
            hostel: [666,371,72,72]
            hotel: [740,371,72,72]
            icecreamparlor: [814,371,72,72]
            imambargah: [888,371,72,72]
            indoorgames: [962,371,72,72]
            insuranceagency: [1,444,72,72]
            intersection: [75,444,71,72]
            jewellerystore: [148,445,72,72]
            juicebar: [222,445,72,72]
            khokha: [296,445,72,72]
            laboratory: [370,445,72,72]
            langar: [444,445,72,72]
            lawenforcement: [518,445,72,72]
            lawyer: [592,445,72,72]
            library: [666,445,72,72]
            localadministration: [740,445,72,72]
            lpgsupplier: [814,445,72,72]
            madrassa: [888,445,72,72]
            materialsupplier: [962,445,72,72]
            meatstore: [1,518,72,72]
            medicalclinic: [148,519,72,72]
            metalwork: [222,519,72,72]
            mill: [296,519,72,72]
            mobileshop: [370,519,72,72]
            moneytransfer: [444,519,72,72]
            monument: [518,519,72,72]
            mosque: [592,519,72,72]
            motel: [666,519,72,72]
            motorbikerepair: [740,519,72,72]
            motorbikeshowroom: [814,519,72,72]
            museum: [888,519,72,72]
            newspaper: [962,519,72,72]
            ngo: [1,592,72,72]
            oiltraders: [75,593,72,72]
            optician: [149,593,72,72]
            orphanage: [223,593,72,72]
            otherbeautyandspa: [297,593,72,72]
            othercivicutilities: [371,593,72,72]
            otherconstruction: [445,593,72,72]
            othereducation: [519,593,72,72]
            otherevents: [593,593,72,72]
            otherfinance: [667,593,72,72]
            otherfood: [741,593,72,72]
            othergeneral: [815,593,72,72]
            othergovernment: [889,593,72,72]
            othergrocery: [963,593,72,72]
            otherindustry: [1,666,72,72]
            otherlocalbusinesses: [75,667,72,72]
            otherlodging: [149,667,72,72]
            othermedia: [223,667,72,72]
            othermedical: [297,667,72,72]
            otherrecreation: [371,667,72,72]
            otherreligion: [445,667,72,72]
            othershopping: [519,667,72,72]
            othersocialservice: [593,667,72,72]
            othersports: [667,667,72,72]
            othertourist: [741,667,72,72]
            othertransportation: [815,667,72,72]
            othervehicle: [889,667,72,72]
            park: [963,667,72,72]
            parking: [1,740,72,72]
            petstore: [75,741,72,72]
            pharmacy: [149,741,72,72]
            photostudio: [223,741,72,72]
            plumber: [297,741,72,72]
            postoffice: [371,741,72,72]
            powerstation: [445,741,72,72]
            pressclub: [519,741,72,72]
            printers: [823,963,80,80]
            privatecompany: [593,741,72,72]
            radiostation: [667,741,72,72]
            railwaystation: [741,741,72,72]
            realestateagency: [815,741,72,72]
            recyclestore: [889,741,72,72]
            refinery: [963,741,72,72]
            rentacar: [1,814,72,72]
            rescueservice: [75,815,72,72]
            restaurant: [149,815,72,72]
            school: [223,815,72,72]
            seaport: [297,815,72,72]
            shoestore: [371,815,72,72]
            shoppingmall: [445,815,72,72]
            shrine: [519,815,72,72]
            spa: [593,815,72,72]
            sportsgoods: [667,815,72,72]
            squashcourt: [741,815,72,72]
            stadium: [815,815,72,72]
            stockbroker: [889,815,72,72]
            suigasoffice: [963,815,72,72]
            supermarket: [1,888,72,72]
            sweetsandbakers: [75,889,72,72]
            swimmingpool: [149,889,72,72]
            tailor: [223,889,72,72]
            tandoor: [297,889,72,72]
            taxistand: [371,889,72,72]
            technicalservices: [445,889,72,72]
            telecommunication: [519,889,72,72]
            telenor: [905,963,80,80]
            temple: [593,889,72,72]
            tenniscourt: [667,889,72,72]
            tomb: [741,889,72,72]
            toystore: [815,889,72,72]
            tpl: [0,1035,75,75]
            traininginstitute: [889,889,72,72]
            travelagency: [963,889,72,72]
            tuitioncenter: [1,962,72,72]
            tvchannel: [75,963,72,72]
            tvstudio: [149,963,72,72]
            tyreshop: [223,963,72,72]
            university: [297,963,72,72]
            veterinarycare: [371,963,72,72]
            vocationalcenter: [445,963,72,72]
            volleyballcourt: [519,963,72,72]
            warehouse: [75,518,71,72]
            wholesale: [75,1,72,71]
            woodwork: [593,963,72,72]
            zoo: [667,963,72,72]

    pois_search:
        url: TPLBaseMapResources.bundle/map_search_icons/map_search.png
        sprites:
            search_accounting: [1,1,80,80]
            search_advertisingagency: [1,83,80,80]
            search_agribusiness: [1,165,80,80]
            search_airport: [1,247,80,80]
            search_ambulance: [1,329,80,80]
            search_amusementpark: [1,411,80,80]
            search_aquarium: [1,493,80,80]
            search_artgallery: [1,575,80,80]
            search_atm: [1,657,80,80]
            search_auditorium: [1,739,80,80]
            search_autospareparts: [1,821,80,80]
            search_autospareparts: [1,903,80,80]
            search_bank: [1,985,80,80]
            search_barber: [1,1067,80,80]
            search_basketballcourt: [83,1,80,80]
            search_beautysalon: [165,1,80,80]
            search_bookstore: [247,1,80,80]
            search_booksandstationers: [903,985,79,80]
            search_busstation: [903,1067,79,80]
            search_busstop: [329,1,80,80]
            search_cafe: [411,1,80,80]
            search_campground: [493,1,80,80]
            search_canteen: [575,1,80,80]
            search_carrepair: [657,1,80,80]
            search_carshowroom: [739,1,80,80]
            search_carwash: [821,1,80,80]
            search_catererseventplanners: [903,1,80,80]
            search_cemetery: [985,1,80,80]
            search_church: [1067,1,80,80]
            search_cinema: [83,83,80,80]
            search_cleaningandlaundry: [83,165,80,80]
            search_clothingstore: [83,247,80,80]
            search_college: [83,329,80,80]
            search_communitycenter: [83,411,80,80]
            search_computerstore: [83,493,80,80]
            search_constructionservices: [83,575,80,80]
            search_conveniencestore: [83,657,80,80]
            search_cosmeticsstore: [83,739,80,80]
            search_courierservice: [83,821,80,80]
            search_court: [83,903,80,80]
            search_cricketground: [83,985,80,80]
            search_currencyexchange: [83,1067,80,80]
            search_dairyshop: [165,83,80,80]
            search_dentist: [247,83,80,80]
            search_dhaba: [329,83,80,80]
            search_drivingschool: [411,83,80,80]
            search_dryport: [493,83,80,80]
            search_electricalstore: [575,83,80,80]
            search_electrician: [657,83,80,80]
            search_electricityoffice: [739,83,80,80]
            search_electronicsstore: [821,83,80,80]
            search_embassy: [903,83,80,80]
            search_equipment: [985,83,80,80]
            search_exhibitionhall: [1067,83,80,80]
            search_factory: [165,165,80,80]
            search_fastfood: [165,247,80,80]
            search_filterationplant: [165,329,80,80]
            search_firestation: [165,411,80,80]
            search_fitnesscenter: [165,493,80,80]
            search_florist: [165,575,80,80]
            search_flyingclub: [165,657,80,80]
            search_footballground: [165,739,80,80]
            search_fruitandvegetable: [165,821,80,80]
            search_fuelstation: [165,903,80,80]
            search_functionhall: [165,985,80,80]
            search_furniturestore: [1066,903,80,79]
            search_giftstore: [165,1067,80,80]
            search_glasswork: [247,165,80,80]
            search_governmentbuildings: [329,165,80,80]
            search_guesthouse: [411,165,80,80]
            search_gurdwara: [493,165,80,80]
            search_hardwareandsanitary: [575,165,80,80]
            search_herbalclinic: [657,165,80,80]
            search_hijamacenter: [739,165,80,80]
            search_hikmat: [821,165,80,80]
            search_historicalplace: [984,985,79,80]
            search_hockeyground: [903,165,80,80]
            search_homegoodsstore: [985,165,80,80]
            search_homeopathicclinic: [1067,165,80,80]
            search_hospital: [247,247,80,80]
            search_hostel: [247,329,80,80]
            search_hotel: [247,411,80,80]
            search_icecreamparlor: [247,493,80,80]
            search_imambargah: [247,575,80,80]
            search_indoorgames: [247,657,80,80]
            search_insuranceagency: [247,739,80,80]
            search_intersection: [985,903,79,80]
            search_jewellerystore: [247,821,80,80]
            search_juicebar: [247,903,80,80]
            search_khokha: [247,985,80,80]
            search_laboratory: [247,1067,80,80]
            search_langar: [329,247,80,80]
            search_lawenforcement: [411,247,80,80]
            search_lawyer: [493,247,80,80]
            search_library: [575,247,80,80]
            search_localadministration: [657,247,80,80]
            search_lpgsupplier: [739,247,80,80]
            search_madrassa: [821,247,80,80]
            search_materialsupplier: [903,247,80,80]
            search_meatstore: [985,247,80,80]
            search_medicalclinic: [1067,247,80,80]
            search_metalwork: [329,329,80,80]
            search_mill: [329,411,80,80]
            search_mobileshop: [329,493,80,80]
            search_moneytransfer: [329,575,80,80]
            search_monument: [329,657,80,80]
            search_mosque: [329,739,80,80]
            search_motel: [329,821,80,80]
            search_motorbikerepair: [329,903,80,80]
            search_motorbikeshowroom: [329,985,80,80]
            search_museum: [329,1067,80,80]
            search_newspaper: [411,329,80,80]
            search_ngo: [493,329,80,80]
            search_oiltraders: [575,329,80,80]
            search_optician: [657,329,80,80]
            search_orphanage: [739,329,80,80]
            search_otherbeautyandspa: [821,329,80,80]
            search_othercivicutilities: [903,329,80,80]
            search_otherconstruction: [985,329,80,80]
            search_othereducation: [1067,329,80,80]
            search_otherevents: [411,411,80,80]
            search_otherfinance: [411,493,80,80]
            search_otherfood: [411,575,80,80]
            search_othergeneral: [411,657,80,80]
            search_othergovernment: [411,739,80,80]
            search_othergrocery: [411,821,80,80]
            search_otherindustry: [411,903,80,80]
            search_otherlocalbusinesses: [411,985,80,80]
            search_otherlodging: [411,1067,80,80]
            search_othermedia: [493,411,80,80]
            search_othermedical: [575,411,80,80]
            search_otherrecreation: [657,411,80,80]
            search_otherreligion: [739,411,80,80]
            search_othershopping: [821,411,80,80]
            search_othersocialservice: [903,411,80,80]
            search_othersports: [985,411,80,80]
            search_othertourist: [1067,411,80,80]
            search_othertransportation: [493,493,80,80]
            search_othervehicle: [493,575,80,80]
            search_park: [493,657,80,80]
            search_parking: [493,739,80,80]
            search_petstore: [493,821,80,80]
            search_pharmacy: [493,903,80,80]
            search_photostudio: [493,985,80,80]
            search_plumber: [493,1067,80,80]
            search_postoffice: [575,493,80,80]
            search_powerstation: [657,493,80,80]
            search_pressclub: [739,493,80,80]
            search_privatecompany: [821,493,80,80]
            search_radiostation: [903,493,80,80]
            search_railwaystation: [985,493,80,80]
            search_realestateagency: [1067,493,80,80]
            search_recyclestore: [575,575,80,80]
            search_refinery: [575,657,80,80]
            search_rentacar: [575,739,80,80]
            search_rescueservice: [575,821,80,80]
            search_restaurant: [575,903,80,80]
            search_school: [575,985,80,80]
            search_seaport: [575,1067,80,80]
            search_shoestore: [657,575,80,80]
            search_shoppingmall: [739,575,80,80]
            search_shrine: [821,575,80,80]
            search_spa: [903,575,80,80]
            search_sportsgoods: [985,575,80,80]
            search_squashcourt: [1067,575,80,80]
            search_stadium: [657,657,80,80]
            search_stockbroker: [657,739,80,80]
            search_suigasoffice: [657,821,80,80]
            search_supermarket: [657,903,80,80]
            search_sweetsandbakers: [657,985,80,80]
            search_swimmingpool: [657,1067,80,80]
            search_tailor: [739,657,80,80]
            search_tandoor: [821,657,80,80]
            search_taxistand: [903,657,80,80]
            search_technicalservices: [985,657,80,80]
            search_telecommunication: [1067,657,80,80]
            search_telenor: [739,739,80,80]
            search_temple: [739,821,80,80]
            search_tenniscourt: [739,903,80,80]
            search_tomb: [739,985,80,80]
            search_toystore: [739,1067,80,80]
            search_tpl: [1065,1065,80,80]
            search_traininginstitute: [821,739,80,80]
            search_travelagency: [903,739,80,80]
            search_tuitioncenter: [985,739,80,80]
            search_tvchannel: [1067,739,80,80]
            search_tvstudio: [821,821,80,80]
            search_tyreshop: [821,903,80,80]
            search_university: [821,985,80,80]
            search_veterinarycare: [821,1067,80,80]
            search_vocationalcenter: [903,821,80,80]
            search_volleyballcourt: [985,821,80,80]
            search_warehouse: [984,1067,79,80]
            search_wholesale: [1066,984,80,79]
            search_woodwork: [1067,821,80,80]
            search_zoo: [903, 903, 80, 80]

    restIcons:
        url: TPLBaseMapResources.bundle/BaseMapIcons/restIcons.png
        sprites:
            currentLocationMarker: [0, 0, 32, 32]
            routeMarker: [90, 152, 160, 160]
            routeMarkerTilt: [154, 72, 80, 80]
            endflag: [168, 0, 72, 72]
            droppin: [0, 152, 90, 90]
            favspin: [0, 72, 74, 75]
            aftarispin: [32, 0, 136, 49]
            selectedPOIPin: [0, 152, 90, 90]

    routeMarker:
        url: TPLBaseMapResources.bundle/BaseMapIcons/heading_arrow_nav.png
        filtering: mipmap
        sprites:
            SPRITE: [0, 0, 160, 160]

    defaultMarker:
        url: TPLBaseMapResources.bundle/BaseMapIcons/default_marker.png

    routeMarkerTilt:
        url: TPLBaseMapResources.bundle/BaseMapIcons/heading_arrow_tilt.png
        filtering: mipmap
        sprites:
            SPRITE: [0, 0, 80, 80]

    # startflag:
    #     url: images/start_flag.png
    #     filtering: mipmap
    #     sprites:
    #         SPRITE: [0, 0, 75, 50]

    endFlag:
        url: TPLBaseMapResources.bundle/Navigation/navigation_finishflag.png
        filtering: mipmap
        sprites:
            SPRITE: [0, 0, 48, 48]

# Will have to define styles for each icon seperately as the textures can't be directly called in the draw function of the layer
# The style will tell the type of object it can be applied to (points for pois) and the applicable texture file
# if the texture is not referenced in a style, then we will get a error
styles:   
    transparent_polyline:
        base: lines
        blend: inlay
        shaders:
            blocks:
                color:
                    color.a = .5;
    transparent_polygon:
        base: polygons
        blend: inlay
        shaders:
            blocks:
                color: |
                    color.a = .5;
    icons:
        base: points
        texture: pois
        blend_order: 2
    search_icons:
        base: points
        texture: pois_search
        blend_order: 3
    currentLocationMarker:
        base: points
        texture: restIcons
        blend_order: 5

    defaultMarker:
        base: points
        texture: defaultMarker
        blend_order: 5

    live_location_marker:
        base: points
        blend_order: 8
    routeMarker:
        base: points
        texture: routeMarker
    # routeMarkerTilt:
    #     base: points
    #     blend: overlay
    #     texture: routeMarkerTilt
    # startflag:
    #     base: points
    #     texture: startflag
    endflag:
        base: points
        texture: endflag
        
    droppin:
        base: points
        texture: restIcons
        blend_order: 7
        
    pinmarker:
        base: points
        texture: pinmarker
        
    recordroutepin:
        base: points
        # blend_order: 5
    text-blend-order:
        base: text
        blend_order: 1
    pois_text:
        base: text
    urdu_text:
        base: text
        blend: inlay
    english_text:
        base: text
        blend: inlay
    road_text:
        base: text
        blend: inlay
    lines2:
        base: lines
    lines3:
        base: lines
    # Color variation in 3d-buildings
    solidbuildings_night:
        base: polygons
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((v_world_position.z*.01 + .9),1.)-0.2);
                    color.r*=0.6;
                    color.g*=0.6;
                    color.b*=0.7;

    solidbuildings_day:
        base: polygons
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((v_world_position.z*.01 + .9),1.));

    cBuildingWindows_night:
        base: polygons
        mix: [geometry-normal,functions-map]
        shaders:
            blocks:
                color: |
                    if (!isWall()) {
                        color.rgb *= vec3(min((worldPosition().z*.01 + .9),1.)-0.2);
                    }else{
                        color.rgb *= (vec3(min((v_world_position.z*.01 + .9),1.))-vec3(0.2*step(0.1,sin(worldPosition().z))))-0.2; //vec3(0.2*(max(ceil(0.9*sin(worldPosition().z)) , 0.0))*(ceil(max( abs(sin(0.4*(abs(v_world_position.x) + abs(v_world_position.y) )))-.5 , 0.0)      )) );
                    }
                    color.r*=0.6;
                    color.g*=0.6;
                    color.b*=0.7;

    cBuildingWindows_day:
        base: polygons
        mix: [geometry-normal,functions-map]
        shaders:
            blocks:
                color: |
                    if (!isWall()) {
                        color.rgb *= vec3(min((worldPosition().z*.01 + .9),1.));
                    }else{
                        color.rgb *= vec3(min((v_world_position.z*.01 + .9),1.))-vec3(0.2*(max(ceil(0.9*sin(worldPosition().z)) , 0.0))*(ceil(max( abs(sin(0.4*(abs(v_world_position.x) + abs(v_world_position.y) )))-.5 , 0.0)      )) );
                    }

    glassBuilding_night:
        base: polygons
        shaders:
            blocks:
                color: |
                    color.rgb *= (vec3(min((v_world_position.z*.01 + .9),1.),min((v_world_position.z*.003 + .8),1.),min((v_world_position.z*.003 + .83),1.))+vec3(1.2*(max(abs(sin(0.4*worldPosition().y)),0.95)-0.95))+vec3(1.2*(max(abs(sin(0.4*worldPosition().z)),0.95)-0.95))-0.2);
                    color.r*=0.6;
                    color.g*=0.6;
                    color.b*=0.7;

    glassBuilding_day:
        base: polygons
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((v_world_position.z*.01 + .9),1.),min((v_world_position.z*.003 + .8),1.),min((v_world_position.z*.003 + .83),1.))+vec3(1.2*(max(abs(sin(0.4*worldPosition().y)),0.95)-0.95))+vec3(1.2*(max(abs(sin(0.4*worldPosition().z)),0.95)-0.95));

    dashedline:
        base: lines
        texcoords: true
        shaders:
            defines:
                background: vec3(0.867, 0.867, 0.867)
            blocks:
                color: |
                    // blend line 50/50 between two colors
                    float t = fract(v_texcoord.y);
                    float e = 0.1; // edge feather
                    vec3 v = vec3(
                        smoothstep(.0, e, t) *
                        (1. - smoothstep(.5, .5 + e, t))
                    );
                    color.rgb = mix(color.rgb, background, v);

    generative-random:
        shaders:
            blocks:
                global: |
                    // 1D Random for 1 and 2 dimentions
                    // ================================
                    float random (float x) {
                        return fract(sin(x)*1e4);
                    }
                    float random (vec2 xy) {
                        return fract(sin(dot(xy.xy, vec2(12.9898,78.233)))* 43758.5453123);
                    }
                    //
                    // 2D Random for 2 dimentions
                    // ================================
                    vec2 random2 (vec2 xy) {
                        return fract(sin(vec2(dot(xy,vec2(127.1,311.7)),dot(xy,vec2(269.5,183.3))))*43758.5453);
                    }
                    //
                    // 3D Random for 2 dimentions
                    // ================================
                    vec3 random3 (vec2 xy) {
                        return fract(sin(vec3( dot(xy,vec2(127.1,311.7)), dot(xy,vec2(269.5,183.3)), dot(xy,vec2(419.2,371.9)) ))*43758.5453);
                    }
                    vec3 random3 (vec3 c) {
                        float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
                        vec3 r;
                        r.z = fract(512.0*j);
                        j *= .125;
                        r.x = fract(512.0*j);
                        j *= .125;
                        r.y = fract(512.0*j);
                        return r-0.5;
                    }
    generative-noise:
        mix: generative-random
        shaders:
            blocks:
                global: |
                    // 1D Value Noise for 1, 2 and 3 dimentions
                    // ================================
                    float noise (in float x) {
                        float i = floor(x);
                        float f = fract(x);
                        float u = f * f * (3.0 - 2.0 * f);
                        return mix(random(i), random(i + 1.0), u);
                    }
                    float noise (vec2 xy) {
                        vec2 i = floor(xy);
                        vec2 f = fract(xy);
                        float a = random(i);
                        float b = random(i + vec2(1.0, 0.0));
                        float c = random(i + vec2(0.0, 1.0));
                        float d = random(i + vec2(1.0, 1.0));
                        vec2 u = f * f * (3.0 - 2.0 * f);
                        return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
                    }
                    float noise (vec3 xyz) {
                        const vec3 step = vec3(110.0, 241.0, 171.0);
                        vec3 i = floor(xyz);
                        vec3 f = fract(xyz);
                        float n = dot(i, step);
                        vec3 u = f * f * (3.0 - 2.0 * f);
                        return mix( mix(mix(random(n + dot(step, vec3(0,0,0))),
                                            random(n + dot(step, vec3(1,0,0))),
                                            u.x),
                                        mix(random(n + dot(step, vec3(0,1,0))),
                                            random(n + dot(step, vec3(1,1,0))),
                                            u.x),
                                        u.y),
                                    mix(mix(random(n + dot(step, vec3(0,0,1))),
                                        random(n + dot(step, vec3(1,0,1))),
                                        u.x),
                                        mix(random(n + dot(step, vec3(0,1,1))),
                                            random(n + dot(step, vec3(1,1,1))),
                                            u.x),
                                    u.y),
                                u.z);
                    }
                    //
                    // Simplex Noise
                    const float F3 =  0.3333333;
                    const float G3 =  0.1666667;
                    float snoise (vec3 p) {
                        vec3 s = floor(p + dot(p, vec3(F3)));
                        vec3 x = p - s + dot(s, vec3(G3));
                        vec3 e = step(vec3(0.0), x - x.yzx);
                        vec3 i1 = e*(1.0 - e.zxy);
                        vec3 i2 = 1.0 - e.zxy*(1.0 - e);
                        vec3 x1 = x - i1 + G3;
                        vec3 x2 = x - i2 + 2.0*G3;
                        vec3 x3 = x - 1.0 + 3.0*G3;
                        vec4 w, d;
                        w.x = dot(x, x);
                        w.y = dot(x1, x1);
                        w.z = dot(x2, x2);
                        w.w = dot(x3, x3);
                        w = max(0.6 - w, 0.0);
                        d.x = dot(random3(s), x);
                        d.y = dot(random3(s + i1), x1);
                        d.z = dot(random3(s + i2), x2);
                        d.w = dot(random3(s + 1.0), x3);
                        w *= w;
                        w *= w;
                        d *= w;
                        return dot(d, vec4(52.0));
                    }
    generative-fbm:
        mix: generative-noise
        shaders:
            defines:
                NUM_OCTAVES: 5
            blocks:
                global: |
                    // Fractional Brownian motion for 1 and 2 dimensions
                    float fbm (float x) {
                        float v = 0.0;
                        float a = 0.5;
                        float shift = float(100.0);
                        for (int i = 0; i < int(NUM_OCTAVES); ++i) {
                            v += a * noise(x);
                            x = x * 2.0 + shift;
                            a *= 0.5;
                        }
                        return v;
                    }
                    float fbm (vec2 xy) {
                        float v = 0.0;
                        float a = 0.5;
                        vec2 shift = vec2(100.0);
                        mat2 rot = mat2(cos(0.5), sin(0.5),
                                        -sin(0.5), cos(0.50));
                        for (int i = 0; i < int(NUM_OCTAVES); ++i) {
                            v += a * noise(xy);
                            xy = rot * xy * 2.0 + shift;
                            a *= 0.5;
                        }
                        return v;
                    }

    geometry-normal:
        shaders:
            blocks:
                global: |
                    // Ask to the geometry normals if this surface is a Wall
                    bool isWall() {
                        return dot(worldNormal(),vec3(0.,0.,1.)) <= 0.01;
                    }
                    //
                    // Ask to the geometry normals if this surface is a roof
                    bool isRoof() {
                        return dot(worldNormal(),vec3(0.,0.,1.)) >= 0.99;
                    }


    filter-grain:
        mix: generative-fbm
        shaders:
            defines:
                GRAIN_AMOUNT: .5
                NUM_OCTAVES: 2
            blocks:
                global: |
                    // Grain fractor on screen space with less concetration in the center
                    // ================================
                    float grain(){
                        #ifdef TANGRAM_FRAGMENT_SHADER
                        vec2 pos = gl_FragCoord.xy;
                        vec2 st = pos/u_resolution.xy-vec2(.5);
                        return dot(st,st)+(fbm(pos*0.6)*0.1);
                        #else
                        return 0.0;
                        #endif
                    }
                filter: |
                    // Apply the grain in the amount defined on GRAIN_AMOUNT
                    color.rgb -= grain()*GRAIN_AMOUNT;

    roadsTraffic:
        animated: true
        texcoords: true
        lighting: true
        base: lines
        mix: filter-grain
        material:
            diffuse: .9
            emission: 0.0
        shaders:
            blocks:
                color: |
                    vec2 st = fract(v_texcoord.xy*vec2(.4,.1));
                    float dir = -0.65;
                    if(color.r>=0.9 && color.g<=0.1 && color.b<=0.1 ){
                        dir = -0.03;
                    }else if(color.r>=0.9 && color.g>=0.9 && color.b<=0.1 ){
                        dir = -0.2;
                    }
                    if (v_color.g < 0.5 ) {
                       if (st.x < 0.5) {
                         st.y = st.y; //(1.-st.y) for 2-ways
                       }
                       st.x = fract(st.x*2.0);
                    }
                    float v = u_time*dir;
                    st *= vec2(4.,1.);
                    st += vec2(1.);
                    vec2 ipos = floor(st);
                    vec2 fpos = fract(st);
                    fpos = fpos+vec2(.0,v*random(ipos.x));
                    ipos = floor(fpos*vec2(10.));
                    fpos = fract(fpos*vec2(1.,10.));

                    st = worldPosition().xy*0.04;
                    float n = noise(st);

                    if(color.r>=0.9 && color.g<=0.1 && color.b<=0.1 ){
                        color.rgba -= vec4(0.0,-1.0,0.0,.0) * max(0.0,(0.7-dot(fpos-.5,fpos-vec2(.5,.9))*3.) * step(0.2,random(ipos.y)));
                    }else if(color.r>=0.9 && color.g>=0.9 && color.b<=0.1 ){
                        color.rgba -= vec4(0.75,1.0,-.5,0.) * max(0.0,(0.7-dot(fpos-.5,fpos-vec2(.5,.9))*3.) * step(0.5,random(ipos.y)));
                    }else{
                        color.rgba -= vec4(-1.0,-0.5,-1.0,0.0) * max(0.0,(0.7-dot(fpos-.5,fpos-vec2(.5,.9))*3.) * step(0.8,random(ipos.y)));
                    }

# define the source of the tiles we are using
sources:
    local:
        type: MVT
        url:
        url_params:
            apikey: global.sdk_api_key
        min_zoom: 1
        max_zoom: 17
    local2:
        type: MVT
        url:
        url_params:
            apikey: global.sdk_api_key
        min_zoom: 14
        max_zoom: 17
    local-pois:
        type: MVT
        url:
        url_params:
            apikey: global.sdk_api_key
        min_zoom: 10
        max_zoom: 17
    generalTraffic:
        type: MVT
        url:
        url_params:
            apikey: global.sdk_api_key
        min_display_zoom: 5
        max_zoom: 17


# As we are using the Composite GeoJSON for the source, each layer drawn here is the object class, the layer name acts as the layer from
# source JSON if we don't explicitly define it, boundary layer here is using the data in the JSON that is followed by the "boundary": key word
# before the features are defined
layers:

    traffic:
        data: { source: generalTraffic , layer: category_traffic}
        filter: function(){ return global.trafficStatus == true}
        highway-m:
            # apply a function in the filter, the resulting objects are used
            filter: function () { return (feature.p == 6 )}
            draw:
                lines:
                    order: function() {if(feature.s=='#d50000'){return 119;}else if(feature.s=='#f3450e'){return 118;}else if(feature.s=='#ffff00'){return 117;}else if(feature.s=='#a5d414'){return 116;}else if(feature.s=='#0bce0a'){return 115;}else{return 114;} }
                    color: function () { return feature.s; }
                    cap: round
                    width: [[5, 0.1px],[10,0.5px],[15,2px],[20,7px]]
        highway-nm:
            filter: function () { return (feature.p == 5 )}
            draw:
                lines:
                    order: function() {if(feature.s=='#d50000'){return 119;}else if(feature.s=='#f3450e'){return 118;}else if(feature.s=='#ffff00'){return 117;}else if(feature.s=='#a5d414'){return 116;}else if(feature.s=='#0bce0a'){return 115;}else{return 114;} }
                    cap: round
                    color: function () { return feature.s; }
                    width: [[5, 0.1px],[10,0.5px],[15,2px],[20,6px]]
        main-roads:
            filter: function() { return feature.p == 4 && $zoom >= 7 ; }
            draw:
                lines:
                    order: function() {if(feature.s=='#d50000'){return 119;}else if(feature.s=='#f3450e'){return 118;}else if(feature.s=='#ffff00'){return 117;}else if(feature.s=='#a5d414'){return 116;}else if(feature.s=='#0bce0a'){return 115;}else{return 114;} }
                    color: function () { return feature.s; }
                    cap: round
                    width: [[7, 0.125px],[10,0.25px],[15,1.5px],[20,6px]]

        secondary-roads:
            filter: function() { return feature.p == 3; }
            draw:
                lines:
                    order: function() {if(feature.s=='#d50000'){return 119;}else if(feature.s=='#f3450e'){return 118;}else if(feature.s=='#ffff00'){return 117;}else if(feature.s=='#a5d414'){return 116;}else if(feature.s=='#0bce0a'){return 115;}else{return 114;} }
                    color: function () { return feature.s; }
                    cap: round
                    width: [[10, 0.125px],[15,1.25px],[20,5px]]

    terrain:
        data: { source: satellite }
        filter: function() { return global.currentTime == 'satellite' }
        draw:
            raster:
                order: 0

    touch:
        data: { source: touch }
        selectedRoute:
            filter: { type: selectedRoute}
            draw:
                lines:
                    priority: 1
                    color: global.colorscheme.selected_route
                    cap: round
                    order: 310
                    width: [[10,8px],[15,12px]]
                    outline:
                        color: global.colorscheme.selected_route_outline
                        width: [[5, 0.1px],[10, 0.5px],[15,1px],[20,2px]]

        routeStartFlag:
            data: { source: routeStartFlag }
            routeStartFlag:
                filter: { type: routeStartFlag }
                draw:
                    routeStartFlag:
                        priority: 1
                        order: 300
                        sprite: SPRITE
                        size: [[12, 22px], [26, 22px]]

        endFlag:
            data: { source: endFlag }
            endFlag:
                filter: { type: endFlag }
                draw:
                    endFlag:
                        priority: 1
                        order: 330
                        sprite: SPRITE
                        size: [[12, 22px], [26, 22px]]
        segmentedRoute:
            filter: { type: segmentedRoute}
            draw:
                lines:
                    priority: 1
                    color:  global.colorscheme.segment
                    outline:
                        color: global.colorscheme.segment_outline
                        width: 1px
                    order: 320
                    width: [[10,8px],[15,12px]]

        Route:
            filter: { type: Route}
            draw:
                lines:
                    priority: 5
                    color: global.colorscheme.nonselected_route
                    cap: round
                    order: 300
                    width: [[10,8px],[15,12px]]
                    outline:
                        color: global.colorscheme.nonselected_route_outline
                        width: [[5, 0.1px],[10, 0.5px],[15,1px],[20,2px]]
                filter:
                    name: true
        line:
            filter: { type: line }
            draw:
                lines:
                    color: function () { return feature.color || 'red'; }
                    order: 50
                    width: 5px
        poly:
            filter: { type: poly }
            draw:
                polygons:
                    color: red
                    order: 40
                    width: 5px
        
    startflag:
            filter: { type: startflag }
            draw:
                startflag:
                    priority: 1
                    order: 100
                    sprite: SPRITE
                    size: [[12, 28px], [15, 22px]]
                    interactive: true
    endflag:
            filter: { type: endflag }
            draw:
                endflag:
                    priority: 1
                    order: 100
                    sprite: SPRITE
                    size: [[12, 22px], [21, 22px]]
                    interactive: true
                    text:
                        text_source: |
                                function() {
                                    return feature.display_endflag_na;
                                }
                        transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                        font:
                            family: sans-serif
                            fill: global.colorscheme.endflag
                            size: 13px
                            stroke: { color: global.colorscheme.poi_stroke , width: 1.0 }

    livetrafficlayer:
        data: { source: livetrafficlayer }
        trafficP5:
            filter: function() { return feature.roadpriority=='5'; }
            draw:
                roadsTraffic:
                    color: function () { return feature.color || 'red'; }
                    order: function() {if(feature.color=='#ff0000'){return 52;}if(feature.color=='#008000'){return 51;}else{return 50;} }
                    cap: round
                    width: [[5, 0.4px],[10,2px],[12,3.5px],[15,15.5px],[21,25px]]

        trafficP4:
            filter: function() { return feature.roadpriority=='4'; }
            draw:
                roadsTraffic:
                    color: function () { return feature.color || 'red'; }
                    order: function() {if(feature.color=='#ff0000'){return 52;}if(feature.color=='#008000'){return 51;}else{return 50;} }
                    cap: round
                    width: [[7, 0.5px],[10,1px],[15,7px],[20,25px]]

        trafficP3:
            filter: function() { return feature.roadpriority=='3'; }
            draw:
                roadsTraffic:
                    color: function () { return feature.color || 'red'; }
                    order: function() {if(feature.color=='#ff0000'){return 52;}if(feature.color=='#008000'){return 51;}else{return 50;} }
                    cap: round
                    width: [[10, 1.25px],[15,4px],[20,23px]]

        trafficP2:
            filter: function() { return feature.roadpriority=='2'; }
            draw:
                roadsTraffic:
                    color: function () { return feature.color || 'red'; }
                    order: function() {if(feature.color=='#ff0000'){return 52;}if(feature.color=='#008000'){return 51;}else{return 50;} }
                    cap: round
                    width: [[12, 1.5px],[15,4px],[20,20px]]

        trafficP1:
            filter: function() { return feature.roadpriority=='1'; }
            draw:
                roadsTraffic:
                    color: function () { return feature.color || 'red'; }
                    order: function() {if(feature.color=='#ff0000'){return 52;}if(feature.color=='#008000'){return 51;}else{return 50;} }
                    cap: round
                    width: [[14, 1px],[15,3px],[20,18px]]

    locationmarker:
        data: { source: locationmarker }
        currentLocationMarker:
            filter: { type: currentLocationMarker }
            draw:
                currentLocationMarker:
                    priority: 0.5
                    interactive: true
                    sprite: currentLocationMarker
                    size: [[12, 22px], [15, 22px]]
                    collide: false

    droppinmarker:
        data: { source: droppinmarker }
        droppin:
            filter: { type: droppin }
            draw:
                droppin:
                    priority: 0.5
                    sprite: droppin
                    size: [[3, 22px], [21, 22px]]
                    
    recordroutepin:
        data: {source : recordroutepin}
        draw:
            recordroutepin:
                priority: 1
                size: 14px
                color: '#F44336'


    defaultMarker:
        data: {source : defaultMarker}
        draw:
            defaultMarker:
                priority: 1
                size: 20px
                collide: false
        
    world:
        data: { source: local, layer: [world,world150,world500] }
        draw:
            polygons:
                # the higher the order, the greater the importance when drawn
                order: 1
                color: global.colorscheme.world
        continent-a:
            filter: function() { return (feature.n.slice(0, 1) == 'A')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.continent_a
        continent-p:
            filter: function() { return (feature.n.slice(0, 3) == 'Pak')}
            day:
                filter: function() { return global.currentTime == 'day' }
                draw:
                    polygons:
                        order: 1
                        color:
                            [
                              [1, '#fbf8f3'],
                              [10, '#f5f0e4'],
                              [15, '#f8f9fa'],

                            ]
            other:
                filter: function() { return global.currentTime != 'day' }
                draw:
                    polygons:
                        order: 1
                        color: global.colorscheme.continent_p
        continent-b:
            filter: function() { return (feature.n.slice(0, 1) == 'B')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.continent_b
        continent-c:
            filter: function() { return (feature.n.slice(0, 1) == 'C')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.continent_c
        continent-i:
            filter: function() { return (feature.n.slice(0, 1) == 'I')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.continent_i
        continent-t:
            filter: function() { return (feature.n.slice(0, 1) == 'T')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.continent_t
        continent-r:
            filter: function() { return (feature.n.slice(0, 1) == 'R')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.continent_r
        continent-u:
            filter: function() { return (feature.n.slice(0, 1) == 'U')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.continent_u
        continent-s:
            filter: function() { return (feature.n.slice(0, 1) == 'S')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.continent_s
        ocean:
            filter: function() { return (feature.n == 'ocean')}
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 1
                    color: global.colorscheme.water


    borders:
        data: { source: local, layer: [borders,borders150,borders500]  }
        country3:
            filter: { p: 0, $zoom: { min: 1 }  }
            draw:
                lines:
                    order: 3
                    color: global.colorscheme.borders_1
                    width: [[2, 0px],[3, 0px],[4,5px],[5,8px],[6,10px],[9,8px],[10,5px]]
                lines2:
                    order: 4
                    color: global.colorscheme.borders_2
                    width: [[2, 0px],[3, 0px],[4,2px],[5,4px],[6,5px],[9,4px],[10,3px]]
                lines3:
                    order: 5
                    color: global.colorscheme.borders_3
                    width: 1px

        province:
            filter: { p: 5 ,$zoom: { max: 10 }}
            draw:
                lines:
                    order: 30
                    color: global.colorscheme.borders_1
                    width: [[5,5px],[10,3px],[20,1px]]
                lines2:
                    order: 40
                    color: global.colorscheme.province
                    width: 1px

    citiesfill:
        data: { source: local, layer: [citiesfill,citiesfill150] }
        day:
            filter: function() { return global.currentTime == 'day' }
            draw:
                polygons:
                    # the higher the order, the greater the importance when drawn
                    order: 5
                    color: [[8,global.colorscheme.citiesfill8_day],[15,global.colorscheme.citiesfill15_day]]
        
    roads:
        data: { source: local, layer: [roads,roads150,roads500] }
        motorway:
            filter: function () { return (feature.p == 6 )}
            draw:
                lines:
                    order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if ((feature.gt==10 && feature.gf == 10) ){
                                        return 19;
                                    }
                                    else 
                                        return 25;
                                }                                
                                return 25;
                            }
                    color: global.colorscheme.motorway
                    width: [[5, 2px], [10, 4px], [15, 8.5px], [17, 18px], [20, 28px]]
                    outline:
                        order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if ((feature.gt==10 && feature.gf == 10) ){
                                        return 19;
                                    }
                                    else 
                                        return 25;
                                }
                                return 20;
                            }
                        color: global.colorscheme.motorway_outline
                        width: [[5, 0.1px], [10, 0.5px], [15, 1px], [20, 2px]]
        highway:
            filter: function () { return (feature.p == 5 )}
            draw:
                lines:
                    order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if ((feature.gt==10 && feature.gf == 10) ){
                                        return 19;
                                    }
                                    else 
                                        return 25;
                                }                                
                                return 24;
                            }
                    color: global.colorscheme.highway
                    width: [[5, 2px], [10, 4px], [15, 5px], [17, 17px], [20, 27px]]
                    outline:
                        order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if ((feature.gt==10 && feature.gf == 10) ){
                                        return 19;
                                    }
                                    else 
                                        return 20;
                                }
                                return 20;
                            }
                        color: global.colorscheme.highway_outline
                        width: [[5, 0.1px], [10, 0.5px], [15, 1px]]
        main-roads:
            filter: function() { return feature.p == 4 && $zoom >= 7 ; }
            draw:
                lines:
                    order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if (feature.gt==10 && feature.gf == 10 ){
                                        return 19;
                                    }
                                    else 
                                        return 25;
                                }                                
                                return 23;
                            }
                    color: global.colorscheme.main_roads
                    width: [[7, 2px], [10, 3px], [15, 7px], [17, 14px], [20, 25px]]
                    outline:
                        order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if (feature.gt==10 && feature.gf == 10 ){
                                        return 19;
                                    }
                                    else 
                                        return 20;
                                }
                                return 20;
                            }
                        color: global.colorscheme.main_roads_outline
                        width: [[5, 0.1px], [10, 0.5px], [15, 1px]]
        secondary-roads:
            filter: function() { return feature.p == 3; }
            draw:
                lines:
                    order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if ((feature.gt==10 && feature.gf == 10) ){
                                        return 19;
                                    }
                                    else 
                                        return 25;
                                }                                
                                return 22;
                            }
                    color: global.colorscheme.secondary_roads
                    width: [[10, 2px], [15, 5.5px], [17, 12px], [20, 23px]]
                    outline:
                        order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if ((feature.gt==10 && feature.gf == 10) ){
                                        return 19;
                                    }
                                    else 
                                        return 20;
                                }
                                return 20;
                            }
                        color: global.colorscheme.secondary_roads_outline
                        width: [[10, 0px], [15, 0.75px]]
        tertiary-roads:
            filter: function() { return feature.p == 2; }
            draw:
                lines:
                    order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if ((feature.gt==10 && feature.gf == 10) ){
                                        return 19;
                                    }
                                    else 
                                        return 25;
                                }                                
                                return 21;
                            }
                    color: global.colorscheme.tertiary_roads
                    width: [[12, 2px], [15, 5px], [17, 11px], [20, 21px]]
                    outline:
                        order: |
                            function(){
                                if(feature.gt){
                                    if(feature.gt==2 && feature.gf == 2){
                                        return 27;
                                    }
                                    else if ((feature.gt==1 && feature.gf == 1) || feature.gt==2 || feature.gf==2){
                                        return 26;
                                    }
                                    else if ((feature.gt==10 && feature.gf == 10) ){
                                        return 19;
                                    }
                                    else 
                                        return 20;
                                }
                                return 20;
                            }
                        color: global.colorscheme.tertiary_roads_outline
                        width: [[12, 0px], [15, 0.5px]]
        streets:
            filter: function() { return feature.p == 1 && $zoom >= 14 ; }
            draw:
                lines:
                    order: 20
                    color: global.colorscheme.streets
                    width: [[14, 2px], [15, 3.5px], [17, 9px], [20, 17px]]
            road_text:
                filter: function() { return $zoom >= 15 ; }
                draw:
                    road_text:
                        priority: 34
                        text_source: n
                        anchor: center
                        align: center
                        # repeat_distance: 512px
                        transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                        font:
                            family: sans-serif
                            fill: global.colorscheme.road_text
                            size: 9px #[[15, 12px], [20, 22px]]
                            stroke: { color: global.colorscheme.road_text_stroke, width: 1.5 }

        labels_highway:
            filter: { $zoom: { min: 11 }, p: 5 }
            draw:
                road_text:
                    # repeat_group: labels-highway-z12
                    priority: 31
                    text_source: n
                    text_wrap: 15
                    anchor: center
                    align: center
                    repeat_distance: 150px
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: sans-serif
                        fill: global.colorscheme.highway_text
                        size: 12px #[[12, 10px], [15, 14px], [17, 24px]]
                        stroke: { color: global.colorscheme.highway_text_border, width: 1.5 }
        labels_main:
            filter: { $zoom: { min: 13 }, p: 4 }
            draw:
                road_text:
                    # repeat_group: labels-highway-z12
                    priority: 32
                    text_source: n
                    text_wrap: 15
                    anchor: center
                    align: center
                    repeat_distance: 150px
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: sans-serif
                        fill: global.colorscheme.highway_text
                        size: 12px #[[12, 10px], [15, 14px], [17, 24px]]
                        stroke: { color: global.colorscheme.highway_text_border, width: 1.5 }

        symbol_motorway:
            filter: function () { return (feature.p == 6 && $zoom >= 7); }
            draw:
                english_text:
                    priority: 7
                    visible: true
                    text_source: r
                    anchor: center
                    align: center
                    # repeat_distance: 512px
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: sans-serif
                        fill: white
                        size: [[7, 9px], [15, 15px]]
                        stroke: { color: green, width: [[7, 2px], [15, 3px]] }

        symbol_highway:
            filter: function () { return (feature.p == 5 && $zoom >= 8 ); }
            draw:
                english_text:
                    priority: 7
                    visible: true
                    text_source: r
                    anchor: center
                    align: center
                    # repeat_distance: 512px
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: sans-serif
                        fill: white
                        size: [[7, 9px], [15, 15px]]
                        stroke: { color: '#3878c7', width: [[7, 2px], [15, 3px]] }

        labels_secondary:
            filter: { $zoom: { min: 13}, p: [ 3] }
            draw:
                road_text:
                    priority: 33
                    text_source: n
                    text_wrap: 15
                    anchor: center
                    align: center
                    # collide: true
                    # repeat_distance: 512px
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: sans-serif
                        fill: global.colorscheme.road_text
                        size: 10px #[[13, 10px], [16, 16px], [20, 23px]]
                        stroke: { color: global.colorscheme.road_text_stroke, width: 1.5 }
        labels_teritiary:
            filter: { $zoom: { min: 14 }, p: [2] }
            draw:
                road_text:
                    priority: 33
                    text_source: n
                    text_wrap: 15
                    anchor: center
                    align: center
                    # collide: true
                    # repeat_distance: 512px
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: sans-serif
                        fill: global.colorscheme.road_text
                        size: 10px #[[13, 10px], [16, 16px], [20, 23px]]
                        stroke: { color: global.colorscheme.road_text_stroke, width: 1.5 }

    scale:
        data: { source: local }
        provinces-6:
            filter: { k: 9, $zoom: [5, 6, 7] }
            draw:
                english_text:
                    priority: 3
                    anchor: center
                    # offset: [0,-18px]
                    text_source: d
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: sans-serif
                        fill: global.colorscheme.provinces_fill
                        size: [[5, 16px], [7, 18px]]
                        #weight: bold
                        stroke: { color: global.colorscheme.provinces_stroke, width: 1 }

        provincial-capitals:
            filter: { k: 5, p: 1, $zoom:  { min: 5, max: 13 } }
            draw:
                english_text:
                    priority: 4
                    anchor: center
                    # offset: [[6,[0,-17px]],[7,[0,-19px]],[8,[0,-18px]],[9,[0,-20px]],[10,[0,-20px]]]
                    text_source: d
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: sans-serif
                        fill: global.colorscheme.province_cap_fill
                        size: [[4, 15px], [7, 16px]]
                        #weight: bold
                        transform: capitalize
                        stroke: { color: global.colorscheme.province_cap_stroke , width: 1 }

        major-cities:
            filter: { k: 5, p: 2, $zoom:  { min: 7, max: 14 }  }
            draw:
                english_text:
                    priority: 5
                    anchor: center
                    # offset: [[7,[0,-13px]],[8,[0,-14.5px]],[9,[0,-17px]],[10,[0,-18px]],[15,[0,-26px]]]
                    text_source: d
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: sans-serif
                        fill: global.colorscheme.cities_fill
                        size: [[7, 15px], [10, 16px]]
                        # weight: 400
                        transform: capitalize
                        stroke: { color: global.colorscheme.cities_stroke , width: 1 }
        cities:
            filter: { k: 5, p: 3 , $zoom:  { min: 8, max: 15 } }
            draw:
                english_text:
                    priority: 6
                    anchor: center
                    # offset: [[8,[0,-12px]],[9,[0,-13.5px]],[10,[0,-14.5px]],[11,[0,-17px]],[15,[0,-23px]]]
                    text_source: d
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: sans-serif
                        fill: global.colorscheme.cities_fill
                        size: [[8, 15px], [11, 16px]]
                        # weight: 350
                        transform: capitalize
                        stroke: { color: global.colorscheme.cities_stroke , width: 1 }
        minor-cities1:
            filter: { k: 5, p: [4,5], $zoom: {min: 9,  max: 15} }
            draw:
                english_text:
                    priority: 8
                    anchor: center
                    # offset: [[11,[0,-14px]],[18,[0,-22px]]]
                    text_source: d
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: sans-serif
                        fill: global.colorscheme.cities_fill
                        size: [[9, 14px], [12, 15px]]
                        # weight: 300
                        transform: capitalize
                        stroke: { color: global.colorscheme.cities_stroke , width: 1 }

        areas-sectors:
            filter: { k: [3], p: [1,2,3,4,5], $zoom: {min: 10,  max: 15}  }
            draw:
                english_text:
                    priority: 9
                    anchor: center
                    # offset: [ 0, 0px ]
                    text_source: d
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: sans-serif
                        fill: global.colorscheme.area_sector_fill
                        size: [[11,12px],[18,20px]]
                        # weight: 400
                        # style: italic
                        transform: capitalize
                        stroke: { color: global.colorscheme.area_sector_stroke , width: 1 }
        areas-subsectors:
            filter: { k: [1,2], p: [1,2,3,4,5],  $zoom: {min: 12,  max: 17} }
            draw:
                english_text:
                    priority: 9
                    anchor: center
                    # offset: [ 0, 0px ]
                    text_source: d
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: sans-serif
                        fill: global.colorscheme.area_sector_fill
                        size: [[11,11px],[18,18px]]
                        # weight: 400
                        # style: italic
                        transform: capitalize
                        stroke: { color: global.colorscheme.area_sector_stroke , width: 1 }

    world_labels:
        data: { source: local }
        country0-34:
            filter: { p: [0], $zoom: [3,4] }
            draw:
                english_text:
                    priority: 1
                    anchor: center
                    # offset: [0px,0px]
                    text_source: n
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: sans-serif
                        fill: global.colorscheme.country
                        size: [[3,10px],[4,13px]]
                        #weight: bold
                        transform: uppercase
                        stroke: { color: global.colorscheme.country_stroke , width: 1 }
        country0-567:
            filter: { p: [0,1], $zoom: [5,6,7] }
            draw:
                english_text:
                    priority: 1
                    anchor: center
                    # offset: [0px,0px]
                    text_source: n
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: sans-serif
                        fill: global.colorscheme.country
                        size: [[5,14px],[7,17px]]
                        #weight: bold
                        transform: uppercase
                        stroke: { color: global.colorscheme.country_stroke , width: 1 }


        capitals:
            filter: { p: 2, $zoom: [4,5,6,7,8] }
            draw:
                english_text:
                    priority: 4
                    anchor: center
                    # offset: [[5,[0,-12px]],[6,[0,-15px]]]
                    text_source: n
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: sans-serif
                        fill: global.colorscheme.capitals
                        size: [[5,12px],[6,14px]]
                        #weight: bold
                        transform: capitalize
                        stroke: { color: global.colorscheme.capitals_stroke , width: 2 }

    cartographic:
        data: { source: local, layer: [cartographic,cartographic150,cartographic500] }
        parks:
            filter: { k: ["parks", "Park"] }
            draw:
                polygons:
                    # interactive: true
                    order: 10
                    color: global.colorscheme.park
        forests:
            filter: { k: ["forests", "Vegetation"] }
            draw:
                polygons:
                    # interactive: true
                    order: function(){if (feature.s == "Forest"){return 6;} else {return 17;}}
                    color: global.colorscheme.vegetation
        religious_places:
            filter: { k: ["religious places", "Religious Place"], $zoom: {min: 16} }
            draw:
                polygons:
                    # interactive: true  
                    order: 15
                    color: global.colorscheme.religious
        industries:
            filter: { k: ["industry", "Industry"] }
            draw:
                polygons:
                    # interactive: true
                    order: 7
                    color: global.colorscheme.industrial
        educational:
            filter: { k: ["educational", "Education"], $zoom: {min: 16} }
            draw:
                polygons:
                    # interactive: true
                    order: 12
                    color: global.colorscheme.school
        hospitals:
            filter: { k: ["hospitals", "Medical"] }
            draw:
                polygons:
                    # interactive: true
                    order: 14
                    color: global.colorscheme.hospital
        openarea:
            filter: function(){ return ((feature.k == "port places") || (feature.k == "Open Area" && feature.s != "Runway")) }
            draw:
                polygons:
                    # interactive: true
                    order: 9
                    color: global.colorscheme.openarea
        coveredarea:
            filter:
                all:
                    - { k: ["runway", "Covered Area"] }
                    # - { s: "Runway"}
                    - $zoom: {min: 16}
            draw:
                polygons:
                    # interactive: true
                    order: 13
                    color: global.colorscheme.coveredarea
        touristattraction:
            filter: { k: ["graveyard", "Tourist Attraction"] }
            draw:
                polygons:
                    # interactive: true
                    order: 17
                    color: global.colorscheme.touristattraction
        sport:
            filter: { k: ["Sports"] }
                    # - {s: "Parking Place"}
            draw:
                polygons:
                    # interactive: true
                    order: 17
                    color: global.colorscheme.sport
        water:
            filter: { k: ["water", "Waterbody"] }
            draw:
                polygons:
                    # interactive: true
                    order: 19
                    color: global.colorscheme.water
        misc:
            filter: { k: ["misc", "Misc"] }
            draw:
                polygons:
                    # interactive: true
                    order: 10
                    color: global.colorscheme.misc
        commercial:
            filter: { k: ["commercial", "Commercial"], s: ["market","Market", "Shopping Mall"] }
            draw:
                polygons:
                    # interactive: true
                    order: 8
                    color: global.colorscheme.commercial
    buildings:
        data: { source: local2 }
        filter: function(){return (global.buildingStatus == true) }
        buildings_day:
            data: { source: local2, layer: buildings }
            filter: function() { return (feature.material == "solid"|| feature.material == "Solid"|| feature.material == "Solid Lines" ||feature.material == "solid_lines") && (global.currentTime == 'day' && global.currentVersion == 'high') ; }
            draw:
                earth:
                    order: 30
                    style: solidbuildings_day
                    color: function () { return (feature.color); }
                    visible: true
                    extrude: true

        buildingsWindows_day:
            data: { source: local2, layer: buildings}
            filter: function() { return (feature.material == "Solid Window" || feature.material == "Solid windows"|| feature.material == "solid_windows" || feature.material == "Solid Windows")  && (global.currentTime == 'day' && global.currentVersion == 'high') ; }
            draw:
                earth:
                    order: 30
                    style: cBuildingWindows_day
                    color: function () { return (feature.color); }
                    extrude: true

        gbuildings_day:
            data: { source: local2, layer: buildings}
            filter: function() { return  (feature.material == "glass")  && (global.currentTime == 'day' && global.currentVersion == 'high') ; }
            draw:
                earth:
                    order: 30
                    style: glassBuilding_day
                    color: function () { return (feature.color); }
                    extrude: true

        buildings_night:
            data: { source: local2, layer: buildings }
            filter: function() { return (feature.material == "solid"|| feature.material == "Solid"|| feature.material == "Solid Lines" ||feature.material == "solid_lines") && (global.currentTime == 'night' && global.currentVersion == 'high') ; }
            draw:
                earth:
                    order: 30
                    style: solidbuildings_night
                    color: function () { return (feature.color); }
                    visible: true
                    extrude: true

        buildingsWindows_night:
            data: { source: local2, layer: buildings}
            filter: function() { return (feature.material == "Solid Window" || feature.material == "Solid windows"|| feature.material == "solid_windows" || feature.material == "Solid Windows")  && (global.currentTime == 'night' && global.currentVersion == 'high') ; }
            draw:
                earth:
                    order: 30
                    style: cBuildingWindows_night
                    color: function () { return (feature.color); }
                    extrude: true

        gbuildings_night:
            data: { source: local2, layer: buildings}
            filter: function() { return  (feature.material == "glass")  && (global.currentTime == 'night' && global.currentVersion == 'high') ; }
            draw:
                earth:
                    order: 30
                    style: glassBuilding_night
                    color: function () { return (feature.color); }
                    extrude: true
        buildings_day_low:
            data: { source: local2, layer: buildings }
            filter: function() { return (feature.material == "solid"|| feature.material == "Solid"|| feature.material == "Solid Lines" ||feature.material == "solid_lines" || feature.material == "Solid Window" || feature.material == "Solid windows"|| feature.material == "solid_windows" || feature.material == "Solid Windows" || feature.material == "glass") && (global.currentTime == 'day' && global.currentVersion == 'low') ; }
            draw:
                earth:
                    order: 30
                    style: solidbuildings_day
                    color: function () { return (feature.color); }
                    visible: true
                    extrude: true
        buildings_night_low:
            data: { source: local2, layer: buildings }
            filter: function() { return (feature.material == "solid"|| feature.material == "Solid"|| feature.material == "Solid Lines" ||feature.material == "solid_lines" || feature.material == "Solid Window" || feature.material == "Solid windows"|| feature.material == "solid_windows" || feature.material == "Solid Windows" || feature.material == "glass") && (global.currentTime == 'night' && global.currentVersion == 'low') ; }
            draw:
                earth:
                    order: 30
                    style: solidbuildings_night
                    color: function () { return (feature.color); }
                    visible: true
                    extrude: true

    carto_labels:
        data: { source: local }
        water:
            filter: { k: ["water", "Waterbody"] , $zoom: {min: 9}}
            draw:
                english_text:
                    priority: 15
                    anchor: center
                    align: center
                    visible: true
                    text_source: n
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: Helvetica
                        size:  [[7, 9px], [10, 10px],[14,14px],[15,16px] ]
                        fill: global.colorscheme.water_fill
                        # style: italic
                        stroke: { color: global.colorscheme.water_stroke , width: 1 }
        parks:
            filter: { k: ["parks", "forests", "Park", "Vegetation"] , $zoom: {min: 12}}
            draw:
                english_text:
                    priority: 15
                    anchor: center
                    align: center
                    visible: true
                    text_source: n
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: Helvetica
                        size:  [[4, 9px],[15,14px] ]
                        fill: global.colorscheme.parks_fill
                        # style: italic
                        stroke: { color: global.colorscheme.parks_stroke , width: 0.5 }

    waterways-labels:
        data: { source: local , layer: [waterways,waterways150,waterways500] }
        filter: { $zoom:  { min: 9 } , n: true }
        labels:
            filter: function() { return feature.n.slice(0, 1) != '?' && feature.n != 'Korang River' }
            draw:
                english_text:
                    interactive: true
                    priority: 15
                    anchor: center
                    align: center
                    visible: true
                    repeat_distance: 1000px
                    text_source: n
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    font:
                        family: Helvetica
                        size:  [[7, 9px], [10, 10px],[14,14px],[15,16px] ]
                        fill: global.colorscheme.water_fill
                        # style: italic
                        transform: capitalize
                        stroke: { color: global.colorscheme.water_stroke , width: 1 }

    waterways:
        data: { source: local }
        waterways:
            filter: function() { return feature.n != '????' && $zoom >= 9  }
            draw:
                lines:
                    order: 18
                    color: global.colorscheme.water
                    width: [[12, 2px], [20, 20px]]
            rivers:
                filter: { t: [river] }
                draw:
                    lines:
                        order: 18
                        color: global.colorscheme.water
                        width: [[10, 2px], [20, 20px]]
            streams:
                filter: { t: [stream] }
                draw:
                    lines:
                        order: 18
                        color: global.colorscheme.water
                        width: [[12, 2px], [20, 15px]]
        waterways-z5:
            filter: { $zoom: { max: 9 } }
            draw:
                lines:
                    order: 18
                    color: global.colorscheme.water
                    width: [[5, 1px], [7, 2px]]
    railways:
        data: { source: local }
        draw:
            dashedline:
                order: 25
                color: [0, 0, 0]
                width: 2px
    pois:
        data: { source: local-pois }
        filter: function(){ return global.poiStatus == true}
        poisiconsandtext:
            filter: function(){return (feature.z <= $zoom) ;}
            draw:
                icons:
                    interactive: true
                    priority: function(){return feature.z;}
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    sprite: |
                        function() {
                            if(feature.s == null)
                            {
                              return 'othergeneral';
                            }
                            else
                            {
                              var str = feature.s;
                              str = str.replace(/\s+/g,'');
                              str = str.replace(/\&+/g,'');
                              str = str.replace(/\/+/g,'');
                              str = str.replace(/\-+/g,'');
                              return str.toLowerCase();
                            }
                            }
                    size: [[10, 13px], [20, 20px]]
                    text:
                        interactive: true
                        transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                        text_source: |
                            function() {
                                if (feature.d && feature.d.length > 30) {
                                    return feature.d.slice(0, 30) + '…';
                                }
                                return feature.d;
                            }
                        font:
                            family: sans-serif
                            fill: |
                                function() {
                                    if(global.currentTime == 'dark'){
                                        return global.pois_color.dark_mode;
                                    }
                                    else if(feature.s == null)
                                    {
                                        return global.pois_color.othergeneral;
                                    }
                                    else
                                    {
                                        var str = feature.s;
                                        str = str.replace(/\s+/g,'');
                                        str = str.replace(/\&+/g,'');
                                        str = str.replace(/\/+/g,'');
                                        str = str.replace(/\-+/g,'');
                                        str=  str.toLowerCase();
                                        if (str=='accounting'){return global.pois_color.accounting;}
                                        else if (str=='advertisingagency'){return global.pois_color.advertisingagency;}
                                        else if (str=='agribusiness'){return global.pois_color.agribusiness;}
                                        else if (str=='airport'){return global.pois_color.airport;}
                                        else if (str=='ambulance'){return global.pois_color.ambulance;}
                                        else if (str=='amusementpark'){return global.pois_color.amusementpark;}
                                        else if (str=='aquarium'){return global.pois_color.aquarium;}
                                        else if (str=='artgallery'){return global.pois_color.artgallery;}
                                        else if (str=='atm'){return global.pois_color.atm;}
                                        else if (str=='auditorium'){return global.pois_color.auditorium;}
                                        else if (str=='autospareparts'){return global.pois_color.autospareparts;}
                                        else if (str=='bank'){return global.pois_color.bank;}
                                        else if (str=='barber'){return global.pois_color.barber;}
                                        else if (str=='basketballcourt'){return global.pois_color.basketballcourt;}
                                        else if (str=='beautysalon'){return global.pois_color.beautysalon;}
                                        else if (str=='bookstore'){return global.pois_color.bookstore;}
                                        else if (str=='booksandstationers'){return global.pois_color.booksandstationers;}
                                        else if (str=='busstation'){return global.pois_color.busstation;}
                                        else if (str=='busstop'){return global.pois_color.busstop;}
                                        else if (str=='cafe'){return global.pois_color.cafe;}
                                        else if (str=='campground'){return global.pois_color.campground;}
                                        else if (str=='canteen'){return global.pois_color.canteen;}
                                        else if (str=='carrepair'){return global.pois_color.carrepair;}
                                        else if (str=='carshowroom'){return global.pois_color.carshowroom;}
                                        else if (str=='carwash'){return global.pois_color.carwash;}
                                        else if (str=='catererseventplanners'){return global.pois_color.catererseventplanners;}
                                        else if (str=='cemetery'){return global.pois_color.cemetery;}
                                        else if (str=='church'){return global.pois_color.church;}
                                        else if (str=='cinema'){return global.pois_color.cinema;}
                                        else if (str=='cleaningandlaundry'){return global.pois_color.cleaningandlaundry;}
                                        else if (str=='clothingstore'){return global.pois_color.clothingstore;}
                                        else if (str=='college'){return global.pois_color.college;}
                                        else if (str=='communitycenter'){return global.pois_color.communitycenter;}
                                        else if (str=='computerstore'){return global.pois_color.computerstore;}
                                        else if (str=='constructionservices'){return global.pois_color.constructionservices;}
                                        else if (str=='conveniencestore'){return global.pois_color.conveniencestore;}
                                        else if (str=='cosmeticsstore'){return global.pois_color.cosmeticsstore;}
                                        else if (str=='courierservice'){return global.pois_color.courierservice;}
                                        else if (str=='court'){return global.pois_color.court;}
                                        else if (str=='cricketground'){return global.pois_color.cricketground;}
                                        else if (str=='currencyexchange'){return global.pois_color.currencyexchange;}
                                        else if (str=='dairyshop'){return global.pois_color.dairyshop;}
                                        else if (str=='dentist'){return global.pois_color.dentist;}
                                        else if (str=='dhaba'){return global.pois_color.dhaba;}
                                        else if (str=='drivingschool'){return global.pois_color.drivingschool;}
                                        else if (str=='dryport'){return global.pois_color.dryport;}
                                        else if (str=='electricalstore'){return global.pois_color.electricalstore;}
                                        else if (str=='electrician'){return global.pois_color.electrician;}
                                        else if (str=='electricityoffice'){return global.pois_color.electricityoffice;}
                                        else if (str=='electronicsstore'){return global.pois_color.electronicsstore;}
                                        else if (str=='embassy'){return global.pois_color.embassy;}
                                        else if (str=='equipment'){return global.pois_color.equipment;}
                                        else if (str=='exhibitionhall'){return global.pois_color.exhibitionhall;}
                                        else if (str=='factory'){return global.pois_color.factory;}
                                        else if (str=='fastfood'){return global.pois_color.fastfood;}
                                        else if (str=='filterationplant'){return global.pois_color.filterationplant;}
                                        else if (str=='firestation'){return global.pois_color.firestation;}
                                        else if (str=='fitnesscenter'){return global.pois_color.fitnesscenter;}
                                        else if (str=='florist'){return global.pois_color.florist;}
                                        else if (str=='flyingclub'){return global.pois_color.flyingclub;}
                                        else if (str=='footballground'){return global.pois_color.footballground;}
                                        else if (str=='fruitandvegetable'){return global.pois_color.fruitandvegetable;}
                                        else if (str=='fuelstation'){return global.pois_color.fuelstation;}
                                        else if (str=='functionhall'){return global.pois_color.functionhall;}
                                        else if (str=='furniturestore'){return global.pois_color.furniturestore;}
                                        else if (str=='giftstore'){return global.pois_color.giftstore;}
                                        else if (str=='glasswork'){return global.pois_color.glasswork;}
                                        else if (str=='governmentbuilding'){return global.pois_color.governmentbuilding;}
                                        else if (str=='guesthouse'){return global.pois_color.guesthouse;}
                                        else if (str=='gurdwara'){return global.pois_color.gurdwara;}
                                        else if (str=='hardwareandsanitary'){return global.pois_color.hardwareandsanitary;}
                                        else if (str=='herbalclinic'){return global.pois_color.herbalclinic;}
                                        else if (str=='hijamacenter'){return global.pois_color.hijamacenter;}
                                        else if (str=='hikmat'){return global.pois_color.hikmat;}
                                        else if (str=='historicalplace'){return global.pois_color.historicalplace;}
                                        else if (str=='hockeyground'){return global.pois_color.hockeyground;}
                                        else if (str=='homegoodsstore'){return global.pois_color.homegoodsstore;}
                                        else if (str=='homeopathicclinic'){return global.pois_color.homeopathicclinic;}
                                        else if (str=='hospital'){return global.pois_color.hospital;}
                                        else if (str=='hostel'){return global.pois_color.hostel;}
                                        else if (str=='hotel'){return global.pois_color.hotel;}
                                        else if (str=='icecreamparlor'){return global.pois_color.icecreamparlor;}
                                        else if (str=='imambargah'){return global.pois_color.imambargah;}
                                        else if (str=='indoorgames'){return global.pois_color.indoorgames;}
                                        else if (str=='insuranceagency'){return global.pois_color.insuranceagency;}
                                        else if (str=='intersection'){return global.pois_color.intersection;}
                                        else if (str=='jazz'){return global.pois_color.jazz;}
                                        else if (str=='jewellerystore'){return global.pois_color.jewellerystore;}
                                        else if (str=='juicebar'){return global.pois_color.juicebar;}
                                        else if (str=='khokha'){return global.pois_color.khokha;}
                                        else if (str=='laboratory'){return global.pois_color.laboratory;}
                                        else if (str=='langar'){return global.pois_color.langar;}
                                        else if (str=='lawenforcement'){return global.pois_color.lawenforcement;}
                                        else if (str=='lawyer'){return global.pois_color.lawyer;}
                                        else if (str=='library'){return global.pois_color.library;}
                                        else if (str=='localadministration'){return global.pois_color.localadministration;}
                                        else if (str=='lpgsupplier'){return global.pois_color.lpgsupplier;}
                                        else if (str=='madrassa'){return global.pois_color.madrassa;}
                                        else if (str=='materialsupplier'){return global.pois_color.materialsupplier;}
                                        else if (str=='meatstore'){return global.pois_color.meatstore;}
                                        else if (str=='medicalclinic'){return global.pois_color.medicalclinic;}
                                        else if (str=='metalwork'){return global.pois_color.metalwork;}
                                        else if (str=='mill'){return global.pois_color.mill;}
                                        else if (str=='mobileshop'){return global.pois_color.mobileshop;}
                                        else if (str=='moneytransfer'){return global.pois_color.moneytransfer;}
                                        else if (str=='monument'){return global.pois_color.monument;}
                                        else if (str=='mosque'){return global.pois_color.mosque;}
                                        else if (str=='motel'){return global.pois_color.motel;}
                                        else if (str=='motorbikerepair'){return global.pois_color.motorbikerepair;}
                                        else if (str=='motorbikeshowroom'){return global.pois_color.motorbikeshowroom;}
                                        else if (str=='museum'){return global.pois_color.museum;}
                                        else if (str=='newspaper'){return global.pois_color.newspaper;}
                                        else if (str=='ngo'){return global.pois_color.ngo;}
                                        else if (str=='oiltraders'){return global.pois_color.oiltraders;}
                                        else if (str=='optician'){return global.pois_color.optician;}
                                        else if (str=='orphanage'){return global.pois_color.orphanage;}
                                        else if (str=='otherbeautyandspa'){return global.pois_color.otherbeautyandspa;}
                                        else if (str=='othercivicutilities'){return global.pois_color.othercivicutilities;}
                                        else if (str=='otherconstruction'){return global.pois_color.otherconstruction;}
                                        else if (str=='othereducation'){return global.pois_color.othereducation;}
                                        else if (str=='otherevents'){return global.pois_color.otherevents;}
                                        else if (str=='otherfinance'){return global.pois_color.otherfinance;}
                                        else if (str=='otherfood'){return global.pois_color.otherfood;}
                                        else if (str=='othergeneral'){return global.pois_color.othergeneral;}
                                        else if (str=='othergovernment'){return global.pois_color.othergovernment;}
                                        else if (str=='othergrocery'){return global.pois_color.othergrocery;}
                                        else if (str=='otherindustry'){return global.pois_color.otherindustry;}
                                        else if (str=='otherlocalbusinesses'){return global.pois_color.otherlocalbusinesses;}
                                        else if (str=='otherlodging'){return global.pois_color.otherlodging;}
                                        else if (str=='othermedia'){return global.pois_color.othermedia;}
                                        else if (str=='othermedical'){return global.pois_color.othermedical;}
                                        else if (str=='otherrecreation'){return global.pois_color.otherrecreation;}
                                        else if (str=='otherreligion'){return global.pois_color.otherreligion;}
                                        else if (str=='othershopping'){return global.pois_color.othershopping;}
                                        else if (str=='othersocialservice'){return global.pois_color.othersocialservice;}
                                        else if (str=='othersports'){return global.pois_color.othersports;}
                                        else if (str=='othertourist'){return global.pois_color.othertourist;}
                                        else if (str=='othertransportation'){return global.pois_color.othertransportation;}
                                        else if (str=='othervehicle'){return global.pois_color.othervehicle;}
                                        else if (str=='park'){return global.pois_color.park;}
                                        else if (str=='parking'){return global.pois_color.parking;}
                                        else if (str=='petstore'){return global.pois_color.petstore;}
                                        else if (str=='pharmacy'){return global.pois_color.pharmacy;}
                                        else if (str=='photostudio'){return global.pois_color.photostudio;}
                                        else if (str=='plumber'){return global.pois_color.plumber;}
                                        else if (str=='postoffice'){return global.pois_color.postoffice;}
                                        else if (str=='powerstation'){return global.pois_color.powerstation;}
                                        else if (str=='pressclub'){return global.pois_color.pressclub;}
                                        else if (str=='printing'){return global.pois_color.printing;}
                                        else if (str=='privatecompany'){return global.pois_color.privatecompany;}
                                        else if (str=='radiostation'){return global.pois_color.radiostation;}
                                        else if (str=='railwaystation'){return global.pois_color.railwaystation;}
                                        else if (str=='realestateagency'){return global.pois_color.realestateagency;}
                                        else if (str=='recyclestore'){return global.pois_color.recyclestore;}
                                        else if (str=='refinery'){return global.pois_color.refinery;}
                                        else if (str=='rentacar'){return global.pois_color.rentacar;}
                                        else if (str=='rescueservice'){return global.pois_color.rescueservice;}
                                        else if (str=='restaurant'){return global.pois_color.restaurant;}
                                        else if (str=='school'){return global.pois_color.school;}
                                        else if (str=='seaport'){return global.pois_color.seaport;}
                                        else if (str=='shoestore'){return global.pois_color.shoestore;}
                                        else if (str=='shoppingmall'){return global.pois_color.shoppingmall;}
                                        else if (str=='shrine'){return global.pois_color.shrine;}
                                        else if (str=='spa'){return global.pois_color.spa;}
                                        else if (str=='sportsgoods'){return global.pois_color.sportsgoods;}
                                        else if (str=='squashcourt'){return global.pois_color.squashcourt;}
                                        else if (str=='stadium'){return global.pois_color.stadium;}
                                        else if (str=='stockbroker'){return global.pois_color.stockbroker;}
                                        else if (str=='suigasoffice'){return global.pois_color.suigasoffice;}
                                        else if (str=='supermarket'){return global.pois_color.supermarket;}
                                        else if (str=='sweetsandbakers'){return global.pois_color.sweetsandbakers;}
                                        else if (str=='swimmingpool'){return global.pois_color.swimmingpool;}
                                        else if (str=='tailor'){return global.pois_color.tailor;}
                                        else if (str=='tandoor'){return global.pois_color.tandoor;}
                                        else if (str=='taxistand'){return global.pois_color.taxistand;}
                                        else if (str=='technicalservices'){return global.pois_color.technicalservices;}
                                        else if (str=='telecommunication'){return global.pois_color.telecommunication;}
                                        else if (str=='telenor'){return global.pois_color.telenor;}
                                        else if (str=='temple'){return global.pois_color.temple;}
                                        else if (str=='tenniscourt'){return global.pois_color.tenniscourt;}
                                        else if (str=='tomb'){return global.pois_color.tomb;}
                                        else if (str=='toystore'){return global.pois_color.toystore;}
                                        else if (str=='tplcorp'){return global.pois_color.tplcorp;}
                                        else if (str=='tplinsurance'){return global.pois_color.tplinsurance;}
                                        else if (str=='tpllifeinsurance'){return global.pois_color.tpllifeinsurance;}
                                        else if (str=='tplmaps'){return global.pois_color.tplmaps;}
                                        else if (str=='tplproperties'){return global.pois_color.tplproperties;}
                                        else if (str=='tpltrakker'){return global.pois_color.tpltrakker;}
                                        else if (str=='traininginstitute'){return global.pois_color.traininginstitute;}
                                        else if (str=='travelagency'){return global.pois_color.travelagency;}
                                        else if (str=='tuitioncenter'){return global.pois_color.tuitioncenter;}
                                        else if (str=='tvchannel'){return global.pois_color.tvchannel;}
                                        else if (str=='tvstudio'){return global.pois_color.tvstudio;}
                                        else if (str=='tyreshop'){return global.pois_color.tyreshop;}
                                        else if (str=='university'){return global.pois_color.university;}
                                        else if (str=='veterinarycare'){return global.pois_color.veterinarycare;}
                                        else if (str=='vocationalcenter'){return global.pois_color.vocationalcenter;}
                                        else if (str=='volleyballcourt'){return global.pois_color.volleyballcourt;}
                                        else if (str=='warehouse'){return global.pois_color.warehouse;}
                                        else if (str=='wholesale'){return global.pois_color.wholesale;}
                                        else if (str=='woodwork'){return global.pois_color.woodwork;}
                                        else if (str=='zoo'){return global.pois_color.zoo;}
                                        else {return global.pois_color.othergeneral;}
                                    }
                                }
                            size: [[10, 12px], [18, 15px]]
                            stroke: { color: global.colorscheme.poi_stroke , width: 1.5 }

    search-pois:
        data: { source: search-pois }
        filter: function(){ return global.poiStatus == true}
        pinmarker:
            filter: { type: pinmarker }
            draw:
                pinmarker:
                    priority: 9.9
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    sprite: SPRITE
                    size: [[12, 44px], [15, 44px]]
                    interactive: true

        search_object:
            draw:
                search_icons:
                    interactive: true
                    priority: 11
                    transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                    sprite: |
                        function() {
                            if(feature.s == null)
                            {
                              return 'search_othergeneral';
                            }
                            else
                            {
                              var str = feature.sub_cat;
                              if (str.search("-se") != -1) {
                                  str = "search_" + str;
                                  var pos = str.search("-se");
                                  str = str.substring(0,pos);
                              }
                              str = str.replace(/\s+/g,'');
                              str = str.replace(/\&+/g,'');
                              str = str.replace(/\/+/g,'');
                              str = str.replace(/\-+/g,'');
                              return str.toLowerCase();
                            }

                            }
                    size: [[10, 15px], [20, 20px]]
                    text:
                        transition: { show: { time: 0.5s }, hide: { time: 0.55s } }
                        text_source: |
                                function() {
                                    if (feature.display_na && feature.display_na.length > 30) {
                                        return feature.display_na.slice(0, 30) + '…';
                                    }
                                    return feature.display_na;
                                }
                        font:
                            family: sans-serif
                            fill: global.colorscheme.poi_fill
                            size: 12px
                            stroke: { color: global.colorscheme.search_poi_stroke , width: 1.5 }
